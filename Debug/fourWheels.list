
fourWheels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004180  08004180  000060e4  2**0
                  CONTENTS
  4 .ARM          00000008  08004180  08004180  00005180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004188  08004188  000060e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004188  08004188  00005188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800418c  0800418c  0000518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08004190  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000060e4  2**0
                  CONTENTS
 10 .bss          00000290  200000e4  200000e4  000060e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000374  20000374  000060e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000060e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097e6  00000000  00000000  00006114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001985  00000000  00000000  0000f8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  00011280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ca  00000000  00000000  00011c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff52  00000000  00000000  00012462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b11c  00000000  00000000  000323b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5071  00000000  00000000  0003d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102541  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b70  00000000  00000000  00102584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001050f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e4 	.word	0x200000e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004158 	.word	0x08004158

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e8 	.word	0x200000e8
 80001c4:	08004158 	.word	0x08004158

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b28:	f000 b96a 	b.w	8000e00 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d14e      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b50:	4694      	mov	ip, r2
 8000b52:	458c      	cmp	ip, r1
 8000b54:	4686      	mov	lr, r0
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	d962      	bls.n	8000c22 <__udivmoddi4+0xde>
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0320 	rsb	r3, r2, #32
 8000b62:	4091      	lsls	r1, r2
 8000b64:	fa20 f303 	lsr.w	r3, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	4319      	orrs	r1, r3
 8000b6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b76:	fa1f f68c 	uxth.w	r6, ip
 8000b7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b82:	fb07 1114 	mls	r1, r7, r4, r1
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb04 f106 	mul.w	r1, r4, r6
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b9a:	f080 8112 	bcs.w	8000dc2 <__udivmoddi4+0x27e>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 810f 	bls.w	8000dc2 <__udivmoddi4+0x27e>
 8000ba4:	3c02      	subs	r4, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb00 f606 	mul.w	r6, r0, r6
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x94>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bca:	f080 80fc 	bcs.w	8000dc6 <__udivmoddi4+0x282>
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	f240 80f9 	bls.w	8000dc6 <__udivmoddi4+0x282>
 8000bd4:	4463      	add	r3, ip
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	1b9b      	subs	r3, r3, r6
 8000bda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bde:	2100      	movs	r1, #0
 8000be0:	b11d      	cbz	r5, 8000bea <__udivmoddi4+0xa6>
 8000be2:	40d3      	lsrs	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d905      	bls.n	8000bfe <__udivmoddi4+0xba>
 8000bf2:	b10d      	cbz	r5, 8000bf8 <__udivmoddi4+0xb4>
 8000bf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e7f5      	b.n	8000bea <__udivmoddi4+0xa6>
 8000bfe:	fab3 f183 	clz	r1, r3
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d146      	bne.n	8000c94 <__udivmoddi4+0x150>
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xcc>
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	f0c0 80f0 	bcc.w	8000df0 <__udivmoddi4+0x2ac>
 8000c10:	1a86      	subs	r6, r0, r2
 8000c12:	eb64 0303 	sbc.w	r3, r4, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d0e6      	beq.n	8000bea <__udivmoddi4+0xa6>
 8000c1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c20:	e7e3      	b.n	8000bea <__udivmoddi4+0xa6>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	f040 8090 	bne.w	8000d48 <__udivmoddi4+0x204>
 8000c28:	eba1 040c 	sub.w	r4, r1, ip
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa1f f78c 	uxth.w	r7, ip
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c46:	fb07 f006 	mul.w	r0, r7, r6
 8000c4a:	4298      	cmp	r0, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x11c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x11a>
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c5e:	4626      	mov	r6, r4
 8000c60:	1a1c      	subs	r4, r3, r0
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb00 f707 	mul.w	r7, r0, r7
 8000c76:	429f      	cmp	r7, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x148>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x146>
 8000c84:	429f      	cmp	r7, r3
 8000c86:	f200 80b0 	bhi.w	8000dea <__udivmoddi4+0x2a6>
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	1bdb      	subs	r3, r3, r7
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	e7a5      	b.n	8000be0 <__udivmoddi4+0x9c>
 8000c94:	f1c1 0620 	rsb	r6, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c9e:	431f      	orrs	r7, r3
 8000ca0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ca4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca8:	ea43 030c 	orr.w	r3, r3, ip
 8000cac:	40f4      	lsrs	r4, r6
 8000cae:	fa00 f801 	lsl.w	r8, r0, r1
 8000cb2:	0c38      	lsrs	r0, r7, #16
 8000cb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ccc:	45a1      	cmp	r9, r4
 8000cce:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x1a6>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cda:	f080 8084 	bcs.w	8000de6 <__udivmoddi4+0x2a2>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f240 8081 	bls.w	8000de6 <__udivmoddi4+0x2a2>
 8000ce4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	eba4 0409 	sub.w	r4, r4, r9
 8000cee:	fa1f f983 	uxth.w	r9, r3
 8000cf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x1d2>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d0c:	d267      	bcs.n	8000dde <__udivmoddi4+0x29a>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	d965      	bls.n	8000dde <__udivmoddi4+0x29a>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d1e:	eba4 040c 	sub.w	r4, r4, ip
 8000d22:	429c      	cmp	r4, r3
 8000d24:	46ce      	mov	lr, r9
 8000d26:	469c      	mov	ip, r3
 8000d28:	d351      	bcc.n	8000dce <__udivmoddi4+0x28a>
 8000d2a:	d04e      	beq.n	8000dca <__udivmoddi4+0x286>
 8000d2c:	b155      	cbz	r5, 8000d44 <__udivmoddi4+0x200>
 8000d2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d32:	eb64 040c 	sbc.w	r4, r4, ip
 8000d36:	fa04 f606 	lsl.w	r6, r4, r6
 8000d3a:	40cb      	lsrs	r3, r1
 8000d3c:	431e      	orrs	r6, r3
 8000d3e:	40cc      	lsrs	r4, r1
 8000d40:	e9c5 6400 	strd	r6, r4, [r5]
 8000d44:	2100      	movs	r1, #0
 8000d46:	e750      	b.n	8000bea <__udivmoddi4+0xa6>
 8000d48:	f1c2 0320 	rsb	r3, r2, #32
 8000d4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d54:	fa24 f303 	lsr.w	r3, r4, r3
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	430c      	orrs	r4, r1
 8000d5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d76:	fb00 f107 	mul.w	r1, r0, r7
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x24c>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d86:	d22c      	bcs.n	8000de2 <__udivmoddi4+0x29e>
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d92a      	bls.n	8000de2 <__udivmoddi4+0x29e>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	4463      	add	r3, ip
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da0:	fb01 f307 	mul.w	r3, r1, r7
 8000da4:	42a3      	cmp	r3, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x276>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000db0:	d213      	bcs.n	8000dda <__udivmoddi4+0x296>
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	d911      	bls.n	8000dda <__udivmoddi4+0x296>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4464      	add	r4, ip
 8000dba:	1ae4      	subs	r4, r4, r3
 8000dbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc0:	e739      	b.n	8000c36 <__udivmoddi4+0xf2>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	e6f0      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	e706      	b.n	8000bd8 <__udivmoddi4+0x94>
 8000dca:	45c8      	cmp	r8, r9
 8000dcc:	d2ae      	bcs.n	8000d2c <__udivmoddi4+0x1e8>
 8000dce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	e7a8      	b.n	8000d2c <__udivmoddi4+0x1e8>
 8000dda:	4631      	mov	r1, r6
 8000ddc:	e7ed      	b.n	8000dba <__udivmoddi4+0x276>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e799      	b.n	8000d16 <__udivmoddi4+0x1d2>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e7d4      	b.n	8000d90 <__udivmoddi4+0x24c>
 8000de6:	46d6      	mov	lr, sl
 8000de8:	e77f      	b.n	8000cea <__udivmoddi4+0x1a6>
 8000dea:	4463      	add	r3, ip
 8000dec:	3802      	subs	r0, #2
 8000dee:	e74d      	b.n	8000c8c <__udivmoddi4+0x148>
 8000df0:	4606      	mov	r6, r0
 8000df2:	4623      	mov	r3, r4
 8000df4:	4608      	mov	r0, r1
 8000df6:	e70f      	b.n	8000c18 <__udivmoddi4+0xd4>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	e730      	b.n	8000c60 <__udivmoddi4+0x11c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f001 fc92 	bl	8002730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f8b6 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 fbaa 	bl	8001568 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e14:	f000 f910 	bl	8001038 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e18:	f000 f9b6 	bl	8001188 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e1c:	f000 fa5c 	bl	80012d8 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000e20:	f000 fb02 	bl	8001428 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000e24:	f000 fb50 	bl	80014c8 <MX_TIM12_Init>
  MX_TIM3_Init();
 8000e28:	f000 fa02 	bl	8001230 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e2c:	f000 faa8 	bl	8001380 <MX_TIM5_Init>

  // motor_a encoder PA15、PB3 timer2 CH1,2, motor PE9、PE11 timer1 CH1,2
  //motor_b encoder PB4、PB5 timer3 CH1, 2, motor PE13、PE14 timer1 CH3,4
  //motor_c encoder PD12、PD13 timer4 CH1,2 ; motor PB14、PB15 timer12 CH1,2
  //motor_d encoder PA0、PA1 timer5 CH1,2; motor PE5、PE6 timer9 CH1,2
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	484b      	ldr	r0, [pc, #300]	@ (8000f60 <main+0x15c>)
 8000e34:	f002 fbe4 	bl	8003600 <HAL_TIM_PWM_Start>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <main+0x3e>
          	  Error_Handler();
 8000e3e:	f000 fbd7 	bl	80015f0 <Error_Handler>
    if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 8000e42:	2104      	movs	r1, #4
 8000e44:	4846      	ldr	r0, [pc, #280]	@ (8000f60 <main+0x15c>)
 8000e46:	f002 fbdb 	bl	8003600 <HAL_TIM_PWM_Start>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <main+0x50>
            	  Error_Handler();
 8000e50:	f000 fbce 	bl	80015f0 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	4843      	ldr	r0, [pc, #268]	@ (8000f64 <main+0x160>)
 8000e58:	f002 fbd2 	bl	8003600 <HAL_TIM_PWM_Start>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <main+0x62>
      	  Error_Handler();
 8000e62:	f000 fbc5 	bl	80015f0 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8000e66:	2104      	movs	r1, #4
 8000e68:	483e      	ldr	r0, [pc, #248]	@ (8000f64 <main+0x160>)
 8000e6a:	f002 fbc9 	bl	8003600 <HAL_TIM_PWM_Start>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <main+0x74>
        	  Error_Handler();
 8000e74:	f000 fbbc 	bl	80015f0 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	483b      	ldr	r0, [pc, #236]	@ (8000f68 <main+0x164>)
 8000e7c:	f002 fbc0 	bl	8003600 <HAL_TIM_PWM_Start>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <main+0x86>
            	  Error_Handler();
 8000e86:	f000 fbb3 	bl	80015f0 <Error_Handler>
   if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4836      	ldr	r0, [pc, #216]	@ (8000f68 <main+0x164>)
 8000e8e:	f002 fbb7 	bl	8003600 <HAL_TIM_PWM_Start>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <main+0x98>
              	  Error_Handler();
 8000e98:	f000 fbaa 	bl	80015f0 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	4831      	ldr	r0, [pc, #196]	@ (8000f64 <main+0x160>)
 8000ea0:	f002 fbae 	bl	8003600 <HAL_TIM_PWM_Start>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <main+0xaa>
        	  Error_Handler();
 8000eaa:	f000 fba1 	bl	80015f0 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8000eae:	210c      	movs	r1, #12
 8000eb0:	482c      	ldr	r0, [pc, #176]	@ (8000f64 <main+0x160>)
 8000eb2:	f002 fba5 	bl	8003600 <HAL_TIM_PWM_Start>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <main+0xbc>
        	  Error_Handler();
 8000ebc:	f000 fb98 	bl	80015f0 <Error_Handler>

  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	482a      	ldr	r0, [pc, #168]	@ (8000f6c <main+0x168>)
 8000ec4:	f002 fb9c 	bl	8003600 <HAL_TIM_PWM_Start>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <main+0xce>
              	Error_Handler();
 8000ece:	f000 fb8f 	bl	80015f0 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4825      	ldr	r0, [pc, #148]	@ (8000f6c <main+0x168>)
 8000ed6:	f002 fb93 	bl	8003600 <HAL_TIM_PWM_Start>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <main+0xe0>
				Error_Handler();
 8000ee0:	f000 fb86 	bl	80015f0 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1) != HAL_OK)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4822      	ldr	r0, [pc, #136]	@ (8000f70 <main+0x16c>)
 8000ee8:	f002 fb8a 	bl	8003600 <HAL_TIM_PWM_Start>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <main+0xf2>
                	Error_Handler();
 8000ef2:	f000 fb7d 	bl	80015f0 <Error_Handler>
    if(HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2) != HAL_OK)
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	481d      	ldr	r0, [pc, #116]	@ (8000f70 <main+0x16c>)
 8000efa:	f002 fb81 	bl	8003600 <HAL_TIM_PWM_Start>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <main+0x104>
  				Error_Handler();
 8000f04:	f000 fb74 	bl	80015f0 <Error_Handler>

    if(HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	481a      	ldr	r0, [pc, #104]	@ (8000f74 <main+0x170>)
 8000f0c:	f002 fb78 	bl	8003600 <HAL_TIM_PWM_Start>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <main+0x116>
                Error_Handler();
 8000f16:	f000 fb6b 	bl	80015f0 <Error_Handler>
    if(HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK)
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <main+0x170>)
 8000f1e:	f002 fb6f 	bl	8003600 <HAL_TIM_PWM_Start>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <main+0x128>
  				Error_Handler();
 8000f28:	f000 fb62 	bl	80015f0 <Error_Handler>
    if(HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4812      	ldr	r0, [pc, #72]	@ (8000f78 <main+0x174>)
 8000f30:	f002 fb66 	bl	8003600 <HAL_TIM_PWM_Start>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <main+0x13a>
                  Error_Handler();
 8000f3a:	f000 fb59 	bl	80015f0 <Error_Handler>
    if(HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2) != HAL_OK)
 8000f3e:	2104      	movs	r1, #4
 8000f40:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <main+0x174>)
 8000f42:	f002 fb5d 	bl	8003600 <HAL_TIM_PWM_Start>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <main+0x14c>
    			Error_Handler();
 8000f4c:	f000 fb50 	bl	80015f0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_motors_speed();
 8000f50:	f000 fb54 	bl	80015fc <get_motors_speed>
	  set_motors_speed();
 8000f54:	f000 fd00 	bl	8001958 <set_motors_speed>
	  set_motors_output();
 8000f58:	f000 fd64 	bl	8001a24 <set_motors_output>
	  get_motors_speed();
 8000f5c:	bf00      	nop
 8000f5e:	e7f7      	b.n	8000f50 <main+0x14c>
 8000f60:	20000148 	.word	0x20000148
 8000f64:	20000100 	.word	0x20000100
 8000f68:	20000190 	.word	0x20000190
 8000f6c:	200001d8 	.word	0x200001d8
 8000f70:	200002b0 	.word	0x200002b0
 8000f74:	20000220 	.word	0x20000220
 8000f78:	20000268 	.word	0x20000268

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	@ 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	@ 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 f8b8 	bl	8004100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <SystemClock_Config+0xb4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <SystemClock_Config+0xb4>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <SystemClock_Config+0xb4>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <SystemClock_Config+0xb8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <SystemClock_Config+0xb8>)
 8000fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <SystemClock_Config+0xb8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fe93 	bl	8002d18 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ff8:	f000 fafa 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f002 f8f6 	bl	8003208 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001022:	f000 fae5 	bl	80015f0 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	@ 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b092      	sub	sp, #72	@ 0x48
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2220      	movs	r2, #32
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f003 f84c 	bl	8004100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001068:	4b45      	ldr	r3, [pc, #276]	@ (8001180 <MX_TIM1_Init+0x148>)
 800106a:	4a46      	ldr	r2, [pc, #280]	@ (8001184 <MX_TIM1_Init+0x14c>)
 800106c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800106e:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 800107a:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <MX_TIM1_Init+0x148>)
 800107c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001080:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001088:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <MX_TIM1_Init+0x148>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108e:	4b3c      	ldr	r3, [pc, #240]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001094:	483a      	ldr	r0, [pc, #232]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001096:	f002 fa63 	bl	8003560 <HAL_TIM_PWM_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80010a0:	f000 faa6 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b0:	4619      	mov	r1, r3
 80010b2:	4833      	ldr	r0, [pc, #204]	@ (8001180 <MX_TIM1_Init+0x148>)
 80010b4:	f002 ff56 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80010be:	f000 fa97 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4826      	ldr	r0, [pc, #152]	@ (8001180 <MX_TIM1_Init+0x148>)
 80010e8:	f002 fbf8 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80010f2:	f000 fa7d 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4820      	ldr	r0, [pc, #128]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001100:	f002 fbec 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800110a:	f000 fa71 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800110e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001112:	2208      	movs	r2, #8
 8001114:	4619      	mov	r1, r3
 8001116:	481a      	ldr	r0, [pc, #104]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001118:	f002 fbe0 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001122:	f000 fa65 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112a:	220c      	movs	r2, #12
 800112c:	4619      	mov	r1, r3
 800112e:	4814      	ldr	r0, [pc, #80]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001130:	f002 fbd4 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800113a:	f000 fa59 	bl	80015f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001152:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001156:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001162:	f002 ff7b 	bl	800405c <HAL_TIMEx_ConfigBreakDeadTime>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800116c:	f000 fa40 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM1_Init+0x148>)
 8001172:	f001 f9c3 	bl	80024fc <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3748      	adds	r7, #72	@ 0x48
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000100 	.word	0x20000100
 8001184:	40010000 	.word	0x40010000

08001188 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	@ 0x30
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2224      	movs	r2, #36	@ 0x24
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f002 ffb2 	bl	8004100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <MX_TIM2_Init+0xa4>)
 80011a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <MX_TIM2_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <MX_TIM2_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <MX_TIM2_Init+0xa4>)
 80011ba:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80011be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_TIM2_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_TIM2_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011cc:	2303      	movs	r3, #3
 80011ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011e4:	2301      	movs	r3, #1
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	@ (800122c <MX_TIM2_Init+0xa4>)
 80011f8:	f002 faca 	bl	8003790 <HAL_TIM_Encoder_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001202:	f000 f9f5 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_TIM2_Init+0xa4>)
 8001214:	f002 fea6 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800121e:	f000 f9e7 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3730      	adds	r7, #48	@ 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000148 	.word	0x20000148

08001230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	@ 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f002 ff5e 	bl	8004100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800124c:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <MX_TIM3_Init+0xa0>)
 800124e:	4a21      	ldr	r2, [pc, #132]	@ (80012d4 <MX_TIM3_Init+0xa4>)
 8001250:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <MX_TIM3_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM3_Init+0xa0>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_TIM3_Init+0xa0>)
 8001260:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001264:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM3_Init+0xa0>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM3_Init+0xa0>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001272:	2303      	movs	r3, #3
 8001274:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_TIM3_Init+0xa0>)
 800129e:	f002 fa77 	bl	8003790 <HAL_TIM_Encoder_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012a8:	f000 f9a2 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM3_Init+0xa0>)
 80012ba:	f002 fe53 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012c4:	f000 f994 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	@ 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000190 	.word	0x20000190
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2224      	movs	r2, #36	@ 0x24
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 ff0a 	bl	8004100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012f4:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <MX_TIM4_Init+0xa0>)
 80012f6:	4a21      	ldr	r2, [pc, #132]	@ (800137c <MX_TIM4_Init+0xa4>)
 80012f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_TIM4_Init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_TIM4_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_TIM4_Init+0xa0>)
 8001308:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800130c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_TIM4_Init+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <MX_TIM4_Init+0xa0>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800131a:	2303      	movs	r3, #3
 800131c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001332:	2301      	movs	r3, #1
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_TIM4_Init+0xa0>)
 8001346:	f002 fa23 	bl	8003790 <HAL_TIM_Encoder_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001350:	f000 f94e 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_TIM4_Init+0xa0>)
 8001362:	f002 fdff 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800136c:	f000 f940 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	@ 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200001d8 	.word	0x200001d8
 800137c:	40000800 	.word	0x40000800

08001380 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2224      	movs	r2, #36	@ 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f002 feb6 	bl	8004100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800139c:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <MX_TIM5_Init+0xa0>)
 800139e:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <MX_TIM5_Init+0xa4>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_TIM5_Init+0xa0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <MX_TIM5_Init+0xa0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_TIM5_Init+0xa0>)
 80013b0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80013b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_TIM5_Init+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <MX_TIM5_Init+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c2:	2303      	movs	r3, #3
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013da:	2301      	movs	r3, #1
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_TIM5_Init+0xa0>)
 80013ee:	f002 f9cf 	bl	8003790 <HAL_TIM_Encoder_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80013f8:	f000 f8fa 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_TIM5_Init+0xa0>)
 800140a:	f002 fdab 	bl	8003f64 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001414:	f000 f8ec 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	@ 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000220 	.word	0x20000220
 8001424:	40000c00 	.word	0x40000c00

08001428 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_TIM9_Init+0x98>)
 8001442:	4a20      	ldr	r2, [pc, #128]	@ (80014c4 <MX_TIM9_Init+0x9c>)
 8001444:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001446:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <MX_TIM9_Init+0x98>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_TIM9_Init+0x98>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4000;
 8001452:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_TIM9_Init+0x98>)
 8001454:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001458:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_TIM9_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_TIM9_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001466:	4816      	ldr	r0, [pc, #88]	@ (80014c0 <MX_TIM9_Init+0x98>)
 8001468:	f002 f87a 	bl	8003560 <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001472:	f000 f8bd 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001476:	2360      	movs	r3, #96	@ 0x60
 8001478:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <MX_TIM9_Init+0x98>)
 800148e:	f002 fa25 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001498:	f000 f8aa 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2204      	movs	r2, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4807      	ldr	r0, [pc, #28]	@ (80014c0 <MX_TIM9_Init+0x98>)
 80014a4:	f002 fa1a 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80014ae:	f000 f89f 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80014b2:	4803      	ldr	r0, [pc, #12]	@ (80014c0 <MX_TIM9_Init+0x98>)
 80014b4:	f001 f822 	bl	80024fc <HAL_TIM_MspPostInit>

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000268 	.word	0x20000268
 80014c4:	40014000 	.word	0x40014000

080014c8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <MX_TIM12_Init+0x98>)
 80014e2:	4a20      	ldr	r2, [pc, #128]	@ (8001564 <MX_TIM12_Init+0x9c>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <MX_TIM12_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <MX_TIM12_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4000;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <MX_TIM12_Init+0x98>)
 80014f4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80014f8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <MX_TIM12_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <MX_TIM12_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001506:	4816      	ldr	r0, [pc, #88]	@ (8001560 <MX_TIM12_Init+0x98>)
 8001508:	f002 f82a 	bl	8003560 <HAL_TIM_PWM_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001512:	f000 f86d 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001516:	2360      	movs	r3, #96	@ 0x60
 8001518:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <MX_TIM12_Init+0x98>)
 800152e:	f002 f9d5 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001538:	f000 f85a 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2204      	movs	r2, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4807      	ldr	r0, [pc, #28]	@ (8001560 <MX_TIM12_Init+0x98>)
 8001544:	f002 f9ca 	bl	80038dc <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800154e:	f000 f84f 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001552:	4803      	ldr	r0, [pc, #12]	@ (8001560 <MX_TIM12_Init+0x98>)
 8001554:	f000 ffd2 	bl	80024fc <HAL_TIM_MspPostInit>

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200002b0 	.word	0x200002b0
 8001564:	40001800 	.word	0x40001800

08001568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <MX_GPIO_Init+0x84>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <MX_GPIO_Init+0x84>)
 8001578:	f043 0310 	orr.w	r3, r3, #16
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <MX_GPIO_Init+0x84>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <MX_GPIO_Init+0x84>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a16      	ldr	r2, [pc, #88]	@ (80015ec <MX_GPIO_Init+0x84>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_GPIO_Init+0x84>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <MX_GPIO_Init+0x84>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <MX_GPIO_Init+0x84>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <MX_GPIO_Init+0x84>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_GPIO_Init+0x84>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <MX_GPIO_Init+0x84>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_GPIO_Init+0x84>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <Error_Handler+0x8>

080015fc <get_motors_speed>:
float encoder_value_c;
float encoder_value_d;
PID_Param* pid_params;

void get_motors_speed()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	latest_encoder_a = __HAL_TIM_GET_COUNTER(&htim2);
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <get_motors_speed+0x74>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <get_motors_speed+0x78>)
 8001610:	edc3 7a00 	vstr	s15, [r3]
	latest_encoder_b = __HAL_TIM_GET_COUNTER(&htim3);
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <get_motors_speed+0x7c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <get_motors_speed+0x80>)
 8001624:	edc3 7a00 	vstr	s15, [r3]
	latest_encoder_c = __HAL_TIM_GET_COUNTER(&htim4);
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <get_motors_speed+0x84>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <get_motors_speed+0x88>)
 8001638:	edc3 7a00 	vstr	s15, [r3]
	latest_encoder_d = __HAL_TIM_GET_COUNTER(&htim5);
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <get_motors_speed+0x8c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <get_motors_speed+0x90>)
 800164c:	edc3 7a00 	vstr	s15, [r3]
	 if (get_systick_ms() >= duration)
 8001650:	f001 f826 	bl	80026a0 <get_systick_ms>
 8001654:	4603      	mov	r3, r0
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fef8 	bl	800044c <__aeabi_ui2d>
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <get_motors_speed+0x94>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7ff f9f3 	bl	8000a4c <__aeabi_dcmpge>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d113      	bne.n	8001694 <get_motors_speed+0x98>
//		  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 2000);
//		  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 2000);

	   }

}
 800166c:	e151      	b.n	8001912 <get_motors_speed+0x316>
 800166e:	bf00      	nop
 8001670:	20000148 	.word	0x20000148
 8001674:	200002f8 	.word	0x200002f8
 8001678:	20000190 	.word	0x20000190
 800167c:	200002fc 	.word	0x200002fc
 8001680:	200001d8 	.word	0x200001d8
 8001684:	20000300 	.word	0x20000300
 8001688:	20000220 	.word	0x20000220
 800168c:	20000304 	.word	0x20000304
 8001690:	200000d0 	.word	0x200000d0
		  encoder_value_a = __HAL_TIM_GET_COUNTER(&htim2);
 8001694:	4ba0      	ldr	r3, [pc, #640]	@ (8001918 <get_motors_speed+0x31c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a2:	4b9e      	ldr	r3, [pc, #632]	@ (800191c <get_motors_speed+0x320>)
 80016a4:	edc3 7a00 	vstr	s15, [r3]
		  encoder_value_b = __HAL_TIM_GET_COUNTER(&htim3);
 80016a8:	4b9d      	ldr	r3, [pc, #628]	@ (8001920 <get_motors_speed+0x324>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b6:	4b9b      	ldr	r3, [pc, #620]	@ (8001924 <get_motors_speed+0x328>)
 80016b8:	edc3 7a00 	vstr	s15, [r3]
		  encoder_value_c = __HAL_TIM_GET_COUNTER(&htim4);
 80016bc:	4b9a      	ldr	r3, [pc, #616]	@ (8001928 <get_motors_speed+0x32c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ca:	4b98      	ldr	r3, [pc, #608]	@ (800192c <get_motors_speed+0x330>)
 80016cc:	edc3 7a00 	vstr	s15, [r3]
		  encoder_value_d = __HAL_TIM_GET_COUNTER(&htim5);
 80016d0:	4b97      	ldr	r3, [pc, #604]	@ (8001930 <get_motors_speed+0x334>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016de:	4b95      	ldr	r3, [pc, #596]	@ (8001934 <get_motors_speed+0x338>)
 80016e0:	edc3 7a00 	vstr	s15, [r3]
		  if ((htim2.Instance->CR1 & TIM_CR1_DIR) != 0)
 80016e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001918 <get_motors_speed+0x31c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <get_motors_speed+0x10a>
			  encoder_value_a=encoder_value_a-4000;
 80016f2:	4b8a      	ldr	r3, [pc, #552]	@ (800191c <get_motors_speed+0x320>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001938 <get_motors_speed+0x33c>
 80016fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001700:	4b86      	ldr	r3, [pc, #536]	@ (800191c <get_motors_speed+0x320>)
 8001702:	edc3 7a00 	vstr	s15, [r3]
		  if ((htim3.Instance->CR1 & TIM_CR1_DIR) != 0)
 8001706:	4b86      	ldr	r3, [pc, #536]	@ (8001920 <get_motors_speed+0x324>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d009      	beq.n	8001728 <get_motors_speed+0x12c>
			  encoder_value_b=encoder_value_b-4000;
 8001714:	4b83      	ldr	r3, [pc, #524]	@ (8001924 <get_motors_speed+0x328>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8001938 <get_motors_speed+0x33c>
 800171e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001722:	4b80      	ldr	r3, [pc, #512]	@ (8001924 <get_motors_speed+0x328>)
 8001724:	edc3 7a00 	vstr	s15, [r3]
		  if ((htim4.Instance->CR1 & TIM_CR1_DIR) != 0)
 8001728:	4b7f      	ldr	r3, [pc, #508]	@ (8001928 <get_motors_speed+0x32c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <get_motors_speed+0x14e>
			  encoder_value_c=encoder_value_c-4000;
 8001736:	4b7d      	ldr	r3, [pc, #500]	@ (800192c <get_motors_speed+0x330>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001938 <get_motors_speed+0x33c>
 8001740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001744:	4b79      	ldr	r3, [pc, #484]	@ (800192c <get_motors_speed+0x330>)
 8001746:	edc3 7a00 	vstr	s15, [r3]
		  if ((htim5.Instance->CR1 & TIM_CR1_DIR) != 0)
 800174a:	4b79      	ldr	r3, [pc, #484]	@ (8001930 <get_motors_speed+0x334>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <get_motors_speed+0x170>
			  encoder_value_d=encoder_value_d-4000;
 8001758:	4b76      	ldr	r3, [pc, #472]	@ (8001934 <get_motors_speed+0x338>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001938 <get_motors_speed+0x33c>
 8001762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001766:	4b73      	ldr	r3, [pc, #460]	@ (8001934 <get_motors_speed+0x338>)
 8001768:	edc3 7a00 	vstr	s15, [r3]
		  if( encoder_value_a>-4000 && encoder_value_a<=4000 )
 800176c:	4b6b      	ldr	r3, [pc, #428]	@ (800191c <get_motors_speed+0x320>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800193c <get_motors_speed+0x340>
 8001776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dd25      	ble.n	80017cc <get_motors_speed+0x1d0>
 8001780:	4b66      	ldr	r3, [pc, #408]	@ (800191c <get_motors_speed+0x320>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001938 <get_motors_speed+0x33c>
 800178a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d81b      	bhi.n	80017cc <get_motors_speed+0x1d0>
			  motor_a.current_speed=(encoder_value_a)/duration*1000;
 8001794:	4b61      	ldr	r3, [pc, #388]	@ (800191c <get_motors_speed+0x320>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe79 	bl	8000490 <__aeabi_f2d>
 800179e:	4b68      	ldr	r3, [pc, #416]	@ (8001940 <get_motors_speed+0x344>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fff6 	bl	8000794 <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b63      	ldr	r3, [pc, #396]	@ (8001944 <get_motors_speed+0x348>)
 80017b6:	f7fe fec3 	bl	8000540 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff f957 	bl	8000a74 <__aeabi_d2f>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a5f      	ldr	r2, [pc, #380]	@ (8001948 <get_motors_speed+0x34c>)
 80017ca:	6013      	str	r3, [r2, #0]
		  if( encoder_value_b>-4000 && encoder_value_b<=4000 )
 80017cc:	4b55      	ldr	r3, [pc, #340]	@ (8001924 <get_motors_speed+0x328>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800193c <get_motors_speed+0x340>
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	dd25      	ble.n	800182c <get_motors_speed+0x230>
 80017e0:	4b50      	ldr	r3, [pc, #320]	@ (8001924 <get_motors_speed+0x328>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001938 <get_motors_speed+0x33c>
 80017ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	d81b      	bhi.n	800182c <get_motors_speed+0x230>
			  motor_b.current_speed=(encoder_value_b)/duration*1000;
 80017f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001924 <get_motors_speed+0x328>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe49 	bl	8000490 <__aeabi_f2d>
 80017fe:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <get_motors_speed+0x344>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe ffc6 	bl	8000794 <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b4b      	ldr	r3, [pc, #300]	@ (8001944 <get_motors_speed+0x348>)
 8001816:	f7fe fe93 	bl	8000540 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f927 	bl	8000a74 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	4a48      	ldr	r2, [pc, #288]	@ (800194c <get_motors_speed+0x350>)
 800182a:	6013      	str	r3, [r2, #0]
		  if( encoder_value_c>-4000 && encoder_value_c<=4000 )
 800182c:	4b3f      	ldr	r3, [pc, #252]	@ (800192c <get_motors_speed+0x330>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800193c <get_motors_speed+0x340>
 8001836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	dd25      	ble.n	800188c <get_motors_speed+0x290>
 8001840:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <get_motors_speed+0x330>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001938 <get_motors_speed+0x33c>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d81b      	bhi.n	800188c <get_motors_speed+0x290>
			  motor_c.current_speed=(encoder_value_c)/duration*1000;
 8001854:	4b35      	ldr	r3, [pc, #212]	@ (800192c <get_motors_speed+0x330>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe19 	bl	8000490 <__aeabi_f2d>
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <get_motors_speed+0x344>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe ff96 	bl	8000794 <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b33      	ldr	r3, [pc, #204]	@ (8001944 <get_motors_speed+0x348>)
 8001876:	f7fe fe63 	bl	8000540 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f8f7 	bl	8000a74 <__aeabi_d2f>
 8001886:	4603      	mov	r3, r0
 8001888:	4a31      	ldr	r2, [pc, #196]	@ (8001950 <get_motors_speed+0x354>)
 800188a:	6013      	str	r3, [r2, #0]
		  if( encoder_value_d>-4000 && encoder_value_d<=4000 )
 800188c:	4b29      	ldr	r3, [pc, #164]	@ (8001934 <get_motors_speed+0x338>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800193c <get_motors_speed+0x340>
 8001896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	dd25      	ble.n	80018ec <get_motors_speed+0x2f0>
 80018a0:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <get_motors_speed+0x338>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001938 <get_motors_speed+0x33c>
 80018aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	d81b      	bhi.n	80018ec <get_motors_speed+0x2f0>
			  motor_d.current_speed=(encoder_value_d)/duration*1000;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <get_motors_speed+0x338>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fde9 	bl	8000490 <__aeabi_f2d>
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <get_motors_speed+0x344>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe ff66 	bl	8000794 <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <get_motors_speed+0x348>)
 80018d6:	f7fe fe33 	bl	8000540 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f8c7 	bl	8000a74 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001954 <get_motors_speed+0x358>)
 80018ea:	6013      	str	r3, [r2, #0]
		  set_systick_ms(0);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 fec7 	bl	8002680 <set_systick_ms>
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <get_motors_speed+0x31c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24
		  __HAL_TIM_SET_COUNTER(&htim3, 0);
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <get_motors_speed+0x324>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24
		  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <get_motors_speed+0x32c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24
		  __HAL_TIM_SET_COUNTER(&htim5, 0);
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <get_motors_speed+0x334>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000148 	.word	0x20000148
 800191c:	20000308 	.word	0x20000308
 8001920:	20000190 	.word	0x20000190
 8001924:	2000030c 	.word	0x2000030c
 8001928:	200001d8 	.word	0x200001d8
 800192c:	20000310 	.word	0x20000310
 8001930:	20000220 	.word	0x20000220
 8001934:	20000314 	.word	0x20000314
 8001938:	457a0000 	.word	0x457a0000
 800193c:	c57a0000 	.word	0xc57a0000
 8001940:	200000d0 	.word	0x200000d0
 8001944:	408f4000 	.word	0x408f4000
 8001948:	2000008c 	.word	0x2000008c
 800194c:	2000009c 	.word	0x2000009c
 8001950:	200000ac 	.word	0x200000ac
 8001954:	200000bc 	.word	0x200000bc

08001958 <set_motors_speed>:
void set_motors_speed()
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	motor_a.expect_speed=2000;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <set_motors_speed+0x28>)
 800195e:	4a09      	ldr	r2, [pc, #36]	@ (8001984 <set_motors_speed+0x2c>)
 8001960:	605a      	str	r2, [r3, #4]
	motor_b.expect_speed=2000;
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <set_motors_speed+0x30>)
 8001964:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <set_motors_speed+0x2c>)
 8001966:	605a      	str	r2, [r3, #4]
	motor_c.expect_speed=2000;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <set_motors_speed+0x34>)
 800196a:	4a06      	ldr	r2, [pc, #24]	@ (8001984 <set_motors_speed+0x2c>)
 800196c:	605a      	str	r2, [r3, #4]
	motor_d.expect_speed=2000;
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <set_motors_speed+0x38>)
 8001970:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <set_motors_speed+0x2c>)
 8001972:	605a      	str	r2, [r3, #4]

}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2000008c 	.word	0x2000008c
 8001984:	44fa0000 	.word	0x44fa0000
 8001988:	2000009c 	.word	0x2000009c
 800198c:	200000ac 	.word	0x200000ac
 8001990:	200000bc 	.word	0x200000bc

08001994 <get_pid_params>:

PID_Param* get_pid_params(float error)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	ed87 0a01 	vstr	s0, [r7, #4]
	float abs_error=fabs(error);
 800199e:	edd7 7a01 	vldr	s15, [r7, #4]
 80019a2:	eef0 7ae7 	vabs.f32	s15, s15
 80019a6:	edc7 7a02 	vstr	s15, [r7, #8]
    for (int i = 0; i < PID_TABLE_SIZE; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e02c      	b.n	8001a0a <get_pid_params+0x76>
    {
        // Check if the error falls within the defined range
        if (abs_error > pid_table[i].min_error && abs_error <= pid_table[i].max_error) {
 80019b0:	491b      	ldr	r1, [pc, #108]	@ (8001a20 <get_pid_params+0x8c>)
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	330c      	adds	r3, #12
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80019c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	dd18      	ble.n	8001a04 <get_pid_params+0x70>
 80019d2:	4913      	ldr	r1, [pc, #76]	@ (8001a20 <get_pid_params+0x8c>)
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3310      	adds	r3, #16
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d807      	bhi.n	8001a04 <get_pid_params+0x70>
            return &pid_table[i]; // Return the parameters for the matching range
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <get_pid_params+0x8c>)
 8001a00:	4413      	add	r3, r2
 8001a02:	e006      	b.n	8001a12 <get_pid_params+0x7e>
    for (int i = 0; i < PID_TABLE_SIZE; i++)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	ddcf      	ble.n	80019b0 <get_pid_params+0x1c>
        }
    }
    // Return NULL if no match is found
    return NULL;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000000 	.word	0x20000000

08001a24 <set_motors_output>:
float integral_out_d;
float derivative_d;
float prev_error_d=0;
float output_d;
void set_motors_output()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	//motor_a
	motor_a.error=motor_a.expect_speed-motor_a.current_speed;
 8001a28:	4b60      	ldr	r3, [pc, #384]	@ (8001bac <set_motors_output+0x188>)
 8001a2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bac <set_motors_output+0x188>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a38:	4b5c      	ldr	r3, [pc, #368]	@ (8001bac <set_motors_output+0x188>)
 8001a3a:	edc3 7a03 	vstr	s15, [r3, #12]

	pid_params = get_pid_params(motor_a.error);
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bac <set_motors_output+0x188>)
 8001a40:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	f7ff ffa4 	bl	8001994 <get_pid_params>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a58      	ldr	r2, [pc, #352]	@ (8001bb0 <set_motors_output+0x18c>)
 8001a50:	6013      	str	r3, [r2, #0]

	integral_a += motor_a.error;
 8001a52:	4b56      	ldr	r3, [pc, #344]	@ (8001bac <set_motors_output+0x188>)
 8001a54:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a58:	4b56      	ldr	r3, [pc, #344]	@ (8001bb4 <set_motors_output+0x190>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	4b54      	ldr	r3, [pc, #336]	@ (8001bb4 <set_motors_output+0x190>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]
	integral_out_a=pid_params->Ki*integral_a;
 8001a68:	4b51      	ldr	r3, [pc, #324]	@ (8001bb0 <set_motors_output+0x18c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a70:	4b50      	ldr	r3, [pc, #320]	@ (8001bb4 <set_motors_output+0x190>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8001bb8 <set_motors_output+0x194>)
 8001a7c:	edc3 7a00 	vstr	s15, [r3]

	if (fabs(integral_out_a)>4000)
 8001a80:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb8 <set_motors_output+0x194>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	eef0 7ae7 	vabs.f32	s15, s15
 8001a8a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001bbc <set_motors_output+0x198>
 8001a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	dd03      	ble.n	8001aa0 <set_motors_output+0x7c>
	{
		integral_a=0;
 8001a98:	4b46      	ldr	r3, [pc, #280]	@ (8001bb4 <set_motors_output+0x190>)
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
	}

	output_a= pid_params->Kp*motor_a.error+ integral_out_a;
 8001aa0:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <set_motors_output+0x18c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	ed93 7a00 	vldr	s14, [r3]
 8001aa8:	4b40      	ldr	r3, [pc, #256]	@ (8001bac <set_motors_output+0x188>)
 8001aaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab2:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <set_motors_output+0x194>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abc:	4b40      	ldr	r3, [pc, #256]	@ (8001bc0 <set_motors_output+0x19c>)
 8001abe:	edc3 7a00 	vstr	s15, [r3]

	derivative_a = (motor_a.error - prev_error_a) / duration *1000;
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bac <set_motors_output+0x188>)
 8001ac4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <set_motors_output+0x1a0>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad2:	ee17 0a90 	vmov	r0, s15
 8001ad6:	f7fe fcdb 	bl	8000490 <__aeabi_f2d>
 8001ada:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <set_motors_output+0x1a4>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fe58 	bl	8000794 <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b36      	ldr	r3, [pc, #216]	@ (8001bcc <set_motors_output+0x1a8>)
 8001af2:	f7fe fd25 	bl	8000540 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe ffb9 	bl	8000a74 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a32      	ldr	r2, [pc, #200]	@ (8001bd0 <set_motors_output+0x1ac>)
 8001b06:	6013      	str	r3, [r2, #0]
	output_a = pid_params->Kd * derivative_a+output_a;
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <set_motors_output+0x18c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b10:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <set_motors_output+0x1ac>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1a:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b26:	edc3 7a00 	vstr	s15, [r3]

	output_a+=motor_a.expect_speed/2;
 8001b2a:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <set_motors_output+0x188>)
 8001b2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b30:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b38:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b42:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b44:	edc3 7a00 	vstr	s15, [r3]
	if (output_a>4000)
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001bbc <set_motors_output+0x198>
 8001b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	dd02      	ble.n	8001b62 <set_motors_output+0x13e>
		output_a=4000;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd4 <set_motors_output+0x1b0>)
 8001b60:	601a      	str	r2, [r3, #0]
	if (output_a<-4000)
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001bd8 <set_motors_output+0x1b4>
 8001b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	d502      	bpl.n	8001b7c <set_motors_output+0x158>
		output_a=-4000;
 8001b76:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b78:	4a18      	ldr	r2, [pc, #96]	@ (8001bdc <set_motors_output+0x1b8>)
 8001b7a:	601a      	str	r2, [r3, #0]

	if (output_a>0)
 8001b7c:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	dd2b      	ble.n	8001be4 <set_motors_output+0x1c0>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, output_a);
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <set_motors_output+0x19c>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <set_motors_output+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9a:	ee17 2a90 	vmov	r2, s15
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <set_motors_output+0x1bc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ba8:	e02c      	b.n	8001c04 <set_motors_output+0x1e0>
 8001baa:	bf00      	nop
 8001bac:	2000008c 	.word	0x2000008c
 8001bb0:	20000318 	.word	0x20000318
 8001bb4:	2000031c 	.word	0x2000031c
 8001bb8:	20000320 	.word	0x20000320
 8001bbc:	457a0000 	.word	0x457a0000
 8001bc0:	2000032c 	.word	0x2000032c
 8001bc4:	20000328 	.word	0x20000328
 8001bc8:	200000d0 	.word	0x200000d0
 8001bcc:	408f4000 	.word	0x408f4000
 8001bd0:	20000324 	.word	0x20000324
 8001bd4:	457a0000 	.word	0x457a0000
 8001bd8:	c57a0000 	.word	0xc57a0000
 8001bdc:	c57a0000 	.word	0xc57a0000
 8001be0:	20000100 	.word	0x20000100
	}

	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -output_a);
 8001be4:	4b68      	ldr	r3, [pc, #416]	@ (8001d88 <set_motors_output+0x364>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	eef1 7a67 	vneg.f32	s15, s15
 8001bee:	4b67      	ldr	r3, [pc, #412]	@ (8001d8c <set_motors_output+0x368>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf6:	ee17 2a90 	vmov	r2, s15
 8001bfa:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001bfc:	4b63      	ldr	r3, [pc, #396]	@ (8001d8c <set_motors_output+0x368>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	//motor_b
	motor_b.error=motor_b.expect_speed-motor_b.current_speed;
 8001c04:	4b62      	ldr	r3, [pc, #392]	@ (8001d90 <set_motors_output+0x36c>)
 8001c06:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c0a:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <set_motors_output+0x36c>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c14:	4b5e      	ldr	r3, [pc, #376]	@ (8001d90 <set_motors_output+0x36c>)
 8001c16:	edc3 7a03 	vstr	s15, [r3, #12]
	pid_params = get_pid_params(motor_b.error);
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d90 <set_motors_output+0x36c>)
 8001c1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f7ff feb6 	bl	8001994 <get_pid_params>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a5a      	ldr	r2, [pc, #360]	@ (8001d94 <set_motors_output+0x370>)
 8001c2c:	6013      	str	r3, [r2, #0]

	integral_b += motor_b.error;
 8001c2e:	4b58      	ldr	r3, [pc, #352]	@ (8001d90 <set_motors_output+0x36c>)
 8001c30:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c34:	4b58      	ldr	r3, [pc, #352]	@ (8001d98 <set_motors_output+0x374>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3e:	4b56      	ldr	r3, [pc, #344]	@ (8001d98 <set_motors_output+0x374>)
 8001c40:	edc3 7a00 	vstr	s15, [r3]
	integral_out_b=pid_params->Ki*integral_b;
 8001c44:	4b53      	ldr	r3, [pc, #332]	@ (8001d94 <set_motors_output+0x370>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c4c:	4b52      	ldr	r3, [pc, #328]	@ (8001d98 <set_motors_output+0x374>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c56:	4b51      	ldr	r3, [pc, #324]	@ (8001d9c <set_motors_output+0x378>)
 8001c58:	edc3 7a00 	vstr	s15, [r3]

	if (fabs(integral_out_b)>4000)
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d9c <set_motors_output+0x378>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	eef0 7ae7 	vabs.f32	s15, s15
 8001c66:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001da0 <set_motors_output+0x37c>
 8001c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	dd03      	ble.n	8001c7c <set_motors_output+0x258>
	{
		integral_b=0;
 8001c74:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <set_motors_output+0x374>)
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
	}

	output_b= pid_params->Kp*motor_b.error+ integral_out_b;
 8001c7c:	4b45      	ldr	r3, [pc, #276]	@ (8001d94 <set_motors_output+0x370>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	4b42      	ldr	r3, [pc, #264]	@ (8001d90 <set_motors_output+0x36c>)
 8001c86:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8e:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <set_motors_output+0x378>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	4b42      	ldr	r3, [pc, #264]	@ (8001da4 <set_motors_output+0x380>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]

	derivative_b = (motor_b.error - prev_error_b) / duration *1000;
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d90 <set_motors_output+0x36c>)
 8001ca0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ca4:	4b40      	ldr	r3, [pc, #256]	@ (8001da8 <set_motors_output+0x384>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cae:	ee17 0a90 	vmov	r0, s15
 8001cb2:	f7fe fbed 	bl	8000490 <__aeabi_f2d>
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dac <set_motors_output+0x388>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fd6a 	bl	8000794 <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	4b38      	ldr	r3, [pc, #224]	@ (8001db0 <set_motors_output+0x38c>)
 8001cce:	f7fe fc37 	bl	8000540 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f7fe fecb 	bl	8000a74 <__aeabi_d2f>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a34      	ldr	r2, [pc, #208]	@ (8001db4 <set_motors_output+0x390>)
 8001ce2:	6013      	str	r3, [r2, #0]
	output_b = pid_params->Kd * derivative_b+output_b;
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <set_motors_output+0x370>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cec:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <set_motors_output+0x390>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <set_motors_output+0x380>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <set_motors_output+0x380>)
 8001d02:	edc3 7a00 	vstr	s15, [r3]

	output_b+=motor_b.expect_speed/2;
 8001d06:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <set_motors_output+0x36c>)
 8001d08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d0c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <set_motors_output+0x380>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <set_motors_output+0x380>)
 8001d20:	edc3 7a00 	vstr	s15, [r3]
	if (output_b>4000)
 8001d24:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <set_motors_output+0x380>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001da0 <set_motors_output+0x37c>
 8001d2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	dd02      	ble.n	8001d3e <set_motors_output+0x31a>
		output_b=4000;
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <set_motors_output+0x380>)
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001db8 <set_motors_output+0x394>)
 8001d3c:	601a      	str	r2, [r3, #0]
	if (output_b<-4000)
 8001d3e:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <set_motors_output+0x380>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001dbc <set_motors_output+0x398>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	d502      	bpl.n	8001d58 <set_motors_output+0x334>
		output_b=-4000;
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <set_motors_output+0x380>)
 8001d54:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc0 <set_motors_output+0x39c>)
 8001d56:	601a      	str	r2, [r3, #0]

	if (output_b>0)
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <set_motors_output+0x380>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	dd2d      	ble.n	8001dc4 <set_motors_output+0x3a0>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, output_b);
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <set_motors_output+0x380>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <set_motors_output+0x368>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d76:	ee17 2a90 	vmov	r2, s15
 8001d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <set_motors_output+0x368>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d84:	e02e      	b.n	8001de4 <set_motors_output+0x3c0>
 8001d86:	bf00      	nop
 8001d88:	2000032c 	.word	0x2000032c
 8001d8c:	20000100 	.word	0x20000100
 8001d90:	2000009c 	.word	0x2000009c
 8001d94:	20000318 	.word	0x20000318
 8001d98:	20000330 	.word	0x20000330
 8001d9c:	20000334 	.word	0x20000334
 8001da0:	457a0000 	.word	0x457a0000
 8001da4:	20000340 	.word	0x20000340
 8001da8:	2000033c 	.word	0x2000033c
 8001dac:	200000d0 	.word	0x200000d0
 8001db0:	408f4000 	.word	0x408f4000
 8001db4:	20000338 	.word	0x20000338
 8001db8:	457a0000 	.word	0x457a0000
 8001dbc:	c57a0000 	.word	0xc57a0000
 8001dc0:	c57a0000 	.word	0xc57a0000
	}

	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, -output_b);
 8001dc4:	4b68      	ldr	r3, [pc, #416]	@ (8001f68 <set_motors_output+0x544>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eef1 7a67 	vneg.f32	s15, s15
 8001dce:	4b67      	ldr	r3, [pc, #412]	@ (8001f6c <set_motors_output+0x548>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd6:	ee17 2a90 	vmov	r2, s15
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001ddc:	4b63      	ldr	r3, [pc, #396]	@ (8001f6c <set_motors_output+0x548>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	//motor_c
	motor_c.error=motor_c.expect_speed-motor_c.current_speed;
 8001de4:	4b62      	ldr	r3, [pc, #392]	@ (8001f70 <set_motors_output+0x54c>)
 8001de6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dea:	4b61      	ldr	r3, [pc, #388]	@ (8001f70 <set_motors_output+0x54c>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f70 <set_motors_output+0x54c>)
 8001df6:	edc3 7a03 	vstr	s15, [r3, #12]
	pid_params = get_pid_params(motor_c.error);
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001f70 <set_motors_output+0x54c>)
 8001dfc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e00:	eeb0 0a67 	vmov.f32	s0, s15
 8001e04:	f7ff fdc6 	bl	8001994 <get_pid_params>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001f74 <set_motors_output+0x550>)
 8001e0c:	6013      	str	r3, [r2, #0]

	integral_c += motor_c.error;
 8001e0e:	4b58      	ldr	r3, [pc, #352]	@ (8001f70 <set_motors_output+0x54c>)
 8001e10:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e14:	4b58      	ldr	r3, [pc, #352]	@ (8001f78 <set_motors_output+0x554>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1e:	4b56      	ldr	r3, [pc, #344]	@ (8001f78 <set_motors_output+0x554>)
 8001e20:	edc3 7a00 	vstr	s15, [r3]
	integral_out_c=pid_params->Ki*integral_c;
 8001e24:	4b53      	ldr	r3, [pc, #332]	@ (8001f74 <set_motors_output+0x550>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e2c:	4b52      	ldr	r3, [pc, #328]	@ (8001f78 <set_motors_output+0x554>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e36:	4b51      	ldr	r3, [pc, #324]	@ (8001f7c <set_motors_output+0x558>)
 8001e38:	edc3 7a00 	vstr	s15, [r3]

	if (fabs(integral_out_c)>4000)
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f7c <set_motors_output+0x558>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	eef0 7ae7 	vabs.f32	s15, s15
 8001e46:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001f80 <set_motors_output+0x55c>
 8001e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	dd03      	ble.n	8001e5c <set_motors_output+0x438>
	{
		integral_c=0;
 8001e54:	4b48      	ldr	r3, [pc, #288]	@ (8001f78 <set_motors_output+0x554>)
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
	}

	output_c= pid_params->Kp*motor_c.error+ integral_out_c;
 8001e5c:	4b45      	ldr	r3, [pc, #276]	@ (8001f74 <set_motors_output+0x550>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	ed93 7a00 	vldr	s14, [r3]
 8001e64:	4b42      	ldr	r3, [pc, #264]	@ (8001f70 <set_motors_output+0x54c>)
 8001e66:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6e:	4b43      	ldr	r3, [pc, #268]	@ (8001f7c <set_motors_output+0x558>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <set_motors_output+0x560>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]

	derivative_c = (motor_c.error - prev_error_c) / duration *1000;
 8001e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f70 <set_motors_output+0x54c>)
 8001e80:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e84:	4b40      	ldr	r3, [pc, #256]	@ (8001f88 <set_motors_output+0x564>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8e:	ee17 0a90 	vmov	r0, s15
 8001e92:	f7fe fafd 	bl	8000490 <__aeabi_f2d>
 8001e96:	4b3d      	ldr	r3, [pc, #244]	@ (8001f8c <set_motors_output+0x568>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	f7fe fc7a 	bl	8000794 <__aeabi_ddiv>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b38      	ldr	r3, [pc, #224]	@ (8001f90 <set_motors_output+0x56c>)
 8001eae:	f7fe fb47 	bl	8000540 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fddb 	bl	8000a74 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a34      	ldr	r2, [pc, #208]	@ (8001f94 <set_motors_output+0x570>)
 8001ec2:	6013      	str	r3, [r2, #0]
	output_c = pid_params->Kd * derivative_c+output_c;
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <set_motors_output+0x550>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ecc:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <set_motors_output+0x570>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <set_motors_output+0x560>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <set_motors_output+0x560>)
 8001ee2:	edc3 7a00 	vstr	s15, [r3]

	output_c+=motor_c.expect_speed/2;
 8001ee6:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <set_motors_output+0x54c>)
 8001ee8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001ef0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ef4:	4b23      	ldr	r3, [pc, #140]	@ (8001f84 <set_motors_output+0x560>)
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efe:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <set_motors_output+0x560>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]
	if (output_c>4000)
 8001f04:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <set_motors_output+0x560>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001f80 <set_motors_output+0x55c>
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	dd02      	ble.n	8001f1e <set_motors_output+0x4fa>
		output_c=4000;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <set_motors_output+0x560>)
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <set_motors_output+0x574>)
 8001f1c:	601a      	str	r2, [r3, #0]
	if (output_c<-4000)
 8001f1e:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <set_motors_output+0x560>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001f9c <set_motors_output+0x578>
 8001f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d502      	bpl.n	8001f38 <set_motors_output+0x514>
		output_c=-4000;
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <set_motors_output+0x560>)
 8001f34:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <set_motors_output+0x57c>)
 8001f36:	601a      	str	r2, [r3, #0]

	if (output_c>0)
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <set_motors_output+0x560>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	dd2f      	ble.n	8001fa8 <set_motors_output+0x584>
	{
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, output_c);
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <set_motors_output+0x560>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <set_motors_output+0x580>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f56:	ee17 2a90 	vmov	r2, s15
 8001f5a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <set_motors_output+0x580>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2200      	movs	r2, #0
 8001f62:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f64:	e030      	b.n	8001fc8 <set_motors_output+0x5a4>
 8001f66:	bf00      	nop
 8001f68:	20000340 	.word	0x20000340
 8001f6c:	20000100 	.word	0x20000100
 8001f70:	200000ac 	.word	0x200000ac
 8001f74:	20000318 	.word	0x20000318
 8001f78:	20000344 	.word	0x20000344
 8001f7c:	20000348 	.word	0x20000348
 8001f80:	457a0000 	.word	0x457a0000
 8001f84:	20000354 	.word	0x20000354
 8001f88:	20000350 	.word	0x20000350
 8001f8c:	200000d0 	.word	0x200000d0
 8001f90:	408f4000 	.word	0x408f4000
 8001f94:	2000034c 	.word	0x2000034c
 8001f98:	457a0000 	.word	0x457a0000
 8001f9c:	c57a0000 	.word	0xc57a0000
 8001fa0:	c57a0000 	.word	0xc57a0000
 8001fa4:	200002b0 	.word	0x200002b0
	}

	else
	{
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, -output_c);
 8001fa8:	4b80      	ldr	r3, [pc, #512]	@ (80021ac <set_motors_output+0x788>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	eef1 7a67 	vneg.f32	s15, s15
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80021b0 <set_motors_output+0x78c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fba:	ee17 2a90 	vmov	r2, s15
 8001fbe:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80021b0 <set_motors_output+0x78c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	//motor_d
	motor_d.error=motor_d.expect_speed-motor_d.current_speed;
 8001fc8:	4b7a      	ldr	r3, [pc, #488]	@ (80021b4 <set_motors_output+0x790>)
 8001fca:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fce:	4b79      	ldr	r3, [pc, #484]	@ (80021b4 <set_motors_output+0x790>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd8:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <set_motors_output+0x790>)
 8001fda:	edc3 7a03 	vstr	s15, [r3, #12]
	pid_params = get_pid_params(motor_d.error);
 8001fde:	4b75      	ldr	r3, [pc, #468]	@ (80021b4 <set_motors_output+0x790>)
 8001fe0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	f7ff fcd4 	bl	8001994 <get_pid_params>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a72      	ldr	r2, [pc, #456]	@ (80021b8 <set_motors_output+0x794>)
 8001ff0:	6013      	str	r3, [r2, #0]

	integral_d += motor_d.error;
 8001ff2:	4b70      	ldr	r3, [pc, #448]	@ (80021b4 <set_motors_output+0x790>)
 8001ff4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ff8:	4b70      	ldr	r3, [pc, #448]	@ (80021bc <set_motors_output+0x798>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	4b6e      	ldr	r3, [pc, #440]	@ (80021bc <set_motors_output+0x798>)
 8002004:	edc3 7a00 	vstr	s15, [r3]
	integral_out_d=pid_params->Ki*integral_d;
 8002008:	4b6b      	ldr	r3, [pc, #428]	@ (80021b8 <set_motors_output+0x794>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002010:	4b6a      	ldr	r3, [pc, #424]	@ (80021bc <set_motors_output+0x798>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	4b69      	ldr	r3, [pc, #420]	@ (80021c0 <set_motors_output+0x79c>)
 800201c:	edc3 7a00 	vstr	s15, [r3]

	if (fabs(integral_out_d)>4000)
 8002020:	4b67      	ldr	r3, [pc, #412]	@ (80021c0 <set_motors_output+0x79c>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	eef0 7ae7 	vabs.f32	s15, s15
 800202a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80021c4 <set_motors_output+0x7a0>
 800202e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	dd03      	ble.n	8002040 <set_motors_output+0x61c>
	{
		integral_d=0;
 8002038:	4b60      	ldr	r3, [pc, #384]	@ (80021bc <set_motors_output+0x798>)
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
	}

	output_d= pid_params->Kp*motor_d.error+ integral_out_d;
 8002040:	4b5d      	ldr	r3, [pc, #372]	@ (80021b8 <set_motors_output+0x794>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	ed93 7a00 	vldr	s14, [r3]
 8002048:	4b5a      	ldr	r3, [pc, #360]	@ (80021b4 <set_motors_output+0x790>)
 800204a:	edd3 7a03 	vldr	s15, [r3, #12]
 800204e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002052:	4b5b      	ldr	r3, [pc, #364]	@ (80021c0 <set_motors_output+0x79c>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	4b5a      	ldr	r3, [pc, #360]	@ (80021c8 <set_motors_output+0x7a4>)
 800205e:	edc3 7a00 	vstr	s15, [r3]

	derivative_d = (motor_d.error - prev_error_d) / duration *1000;
 8002062:	4b54      	ldr	r3, [pc, #336]	@ (80021b4 <set_motors_output+0x790>)
 8002064:	ed93 7a03 	vldr	s14, [r3, #12]
 8002068:	4b58      	ldr	r3, [pc, #352]	@ (80021cc <set_motors_output+0x7a8>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002072:	ee17 0a90 	vmov	r0, s15
 8002076:	f7fe fa0b 	bl	8000490 <__aeabi_f2d>
 800207a:	4b55      	ldr	r3, [pc, #340]	@ (80021d0 <set_motors_output+0x7ac>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fb88 	bl	8000794 <__aeabi_ddiv>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b50      	ldr	r3, [pc, #320]	@ (80021d4 <set_motors_output+0x7b0>)
 8002092:	f7fe fa55 	bl	8000540 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fce9 	bl	8000a74 <__aeabi_d2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4a4c      	ldr	r2, [pc, #304]	@ (80021d8 <set_motors_output+0x7b4>)
 80020a6:	6013      	str	r3, [r2, #0]
	output_d = pid_params->Kd * derivative_d+output_d;
 80020a8:	4b43      	ldr	r3, [pc, #268]	@ (80021b8 <set_motors_output+0x794>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80020b0:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <set_motors_output+0x7b4>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ba:	4b43      	ldr	r3, [pc, #268]	@ (80021c8 <set_motors_output+0x7a4>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c4:	4b40      	ldr	r3, [pc, #256]	@ (80021c8 <set_motors_output+0x7a4>)
 80020c6:	edc3 7a00 	vstr	s15, [r3]

	output_d+=motor_d.expect_speed/2;
 80020ca:	4b3a      	ldr	r3, [pc, #232]	@ (80021b4 <set_motors_output+0x790>)
 80020cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80020d0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80020d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020d8:	4b3b      	ldr	r3, [pc, #236]	@ (80021c8 <set_motors_output+0x7a4>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e2:	4b39      	ldr	r3, [pc, #228]	@ (80021c8 <set_motors_output+0x7a4>)
 80020e4:	edc3 7a00 	vstr	s15, [r3]
	if (output_d>4000)
 80020e8:	4b37      	ldr	r3, [pc, #220]	@ (80021c8 <set_motors_output+0x7a4>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80021c4 <set_motors_output+0x7a0>
 80020f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	dd02      	ble.n	8002102 <set_motors_output+0x6de>
		output_d=4000;
 80020fc:	4b32      	ldr	r3, [pc, #200]	@ (80021c8 <set_motors_output+0x7a4>)
 80020fe:	4a37      	ldr	r2, [pc, #220]	@ (80021dc <set_motors_output+0x7b8>)
 8002100:	601a      	str	r2, [r3, #0]
	if (output_d<-4000)
 8002102:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <set_motors_output+0x7a4>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80021e0 <set_motors_output+0x7bc>
 800210c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	d502      	bpl.n	800211c <set_motors_output+0x6f8>
		output_d=-4000;
 8002116:	4b2c      	ldr	r3, [pc, #176]	@ (80021c8 <set_motors_output+0x7a4>)
 8002118:	4a32      	ldr	r2, [pc, #200]	@ (80021e4 <set_motors_output+0x7c0>)
 800211a:	601a      	str	r2, [r3, #0]

	if (output_d>0)
 800211c:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <set_motors_output+0x7a4>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	dd0e      	ble.n	800214a <set_motors_output+0x726>
	{
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, output_d);
 800212c:	4b26      	ldr	r3, [pc, #152]	@ (80021c8 <set_motors_output+0x7a4>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <set_motors_output+0x7c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800213a:	ee17 2a90 	vmov	r2, s15
 800213e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 8002140:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <set_motors_output+0x7c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	639a      	str	r2, [r3, #56]	@ 0x38
 8002148:	e00f      	b.n	800216a <set_motors_output+0x746>
	}

	else
	{
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, -output_d);
 800214a:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <set_motors_output+0x7a4>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	eef1 7a67 	vneg.f32	s15, s15
 8002154:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <set_motors_output+0x7c4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800215c:	ee17 2a90 	vmov	r2, s15
 8002160:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8002162:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <set_motors_output+0x7c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34
	}


	if (get_systick_ms() >= duration)
 800216a:	f000 fa99 	bl	80026a0 <get_systick_ms>
 800216e:	4603      	mov	r3, r0
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f96b 	bl	800044c <__aeabi_ui2d>
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <set_motors_output+0x7ac>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fc66 	bl	8000a4c <__aeabi_dcmpge>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d100      	bne.n	8002188 <set_motors_output+0x764>
		prev_error_b=motor_b.error;
		prev_error_c=motor_c.error;
		prev_error_d=motor_d.error;
	}

}
 8002186:	e00f      	b.n	80021a8 <set_motors_output+0x784>
		prev_error_a=motor_a.error;
 8002188:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <set_motors_output+0x7c8>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a18      	ldr	r2, [pc, #96]	@ (80021f0 <set_motors_output+0x7cc>)
 800218e:	6013      	str	r3, [r2, #0]
		prev_error_b=motor_b.error;
 8002190:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <set_motors_output+0x7d0>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <set_motors_output+0x7d4>)
 8002196:	6013      	str	r3, [r2, #0]
		prev_error_c=motor_c.error;
 8002198:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <set_motors_output+0x7d8>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a18      	ldr	r2, [pc, #96]	@ (8002200 <set_motors_output+0x7dc>)
 800219e:	6013      	str	r3, [r2, #0]
		prev_error_d=motor_d.error;
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <set_motors_output+0x790>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <set_motors_output+0x7a8>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000354 	.word	0x20000354
 80021b0:	200002b0 	.word	0x200002b0
 80021b4:	200000bc 	.word	0x200000bc
 80021b8:	20000318 	.word	0x20000318
 80021bc:	20000358 	.word	0x20000358
 80021c0:	2000035c 	.word	0x2000035c
 80021c4:	457a0000 	.word	0x457a0000
 80021c8:	20000368 	.word	0x20000368
 80021cc:	20000364 	.word	0x20000364
 80021d0:	200000d0 	.word	0x200000d0
 80021d4:	408f4000 	.word	0x408f4000
 80021d8:	20000360 	.word	0x20000360
 80021dc:	457a0000 	.word	0x457a0000
 80021e0:	c57a0000 	.word	0xc57a0000
 80021e4:	c57a0000 	.word	0xc57a0000
 80021e8:	20000268 	.word	0x20000268
 80021ec:	2000008c 	.word	0x2000008c
 80021f0:	20000328 	.word	0x20000328
 80021f4:	2000009c 	.word	0x2000009c
 80021f8:	2000033c 	.word	0x2000033c
 80021fc:	200000ac 	.word	0x200000ac
 8002200:	20000350 	.word	0x20000350

08002204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_MspInit+0x4c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <HAL_MspInit+0x4c>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <HAL_MspInit+0x4c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <HAL_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <HAL_MspInit+0x4c>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10e      	bne.n	8002284 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	4b1e      	ldr	r3, [pc, #120]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6453      	str	r3, [r2, #68]	@ 0x44
 8002276:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002282:	e026      	b.n	80022d2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM9)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a17      	ldr	r2, [pc, #92]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x94>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	4a13      	ldr	r2, [pc, #76]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229c:	6453      	str	r3, [r2, #68]	@ 0x44
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
}
 80022aa:	e012      	b.n	80022d2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0e      	ldr	r2, [pc, #56]	@ (80022ec <HAL_TIM_PWM_MspInit+0x98>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10d      	bne.n	80022d2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	4a09      	ldr	r2, [pc, #36]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 80022c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x90>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40014000 	.word	0x40014000
 80022ec:	40001800 	.word	0x40001800

080022f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b090      	sub	sp, #64	@ 0x40
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002310:	d14b      	bne.n	80023aa <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002316:	4b72      	ldr	r3, [pc, #456]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	4a71      	ldr	r2, [pc, #452]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6413      	str	r3, [r2, #64]	@ 0x40
 8002322:	4b6f      	ldr	r3, [pc, #444]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
 8002332:	4b6b      	ldr	r3, [pc, #428]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a6a      	ldr	r2, [pc, #424]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b68      	ldr	r3, [pc, #416]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
 800234e:	4b64      	ldr	r3, [pc, #400]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a63      	ldr	r2, [pc, #396]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b61      	ldr	r3, [pc, #388]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002378:	2301      	movs	r3, #1
 800237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002380:	4619      	mov	r1, r3
 8002382:	4858      	ldr	r0, [pc, #352]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002384:	f000 fb2c 	bl	80029e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002388:	2308      	movs	r3, #8
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002398:	2301      	movs	r3, #1
 800239a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a0:	4619      	mov	r1, r3
 80023a2:	4851      	ldr	r0, [pc, #324]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80023a4:	f000 fb1c 	bl	80029e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80023a8:	e095      	b.n	80024d6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a4f      	ldr	r2, [pc, #316]	@ (80024ec <HAL_TIM_Encoder_MspInit+0x1fc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d12c      	bne.n	800240e <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	4b49      	ldr	r3, [pc, #292]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	4a48      	ldr	r2, [pc, #288]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c4:	4b46      	ldr	r3, [pc, #280]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	4b42      	ldr	r3, [pc, #264]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	4a41      	ldr	r2, [pc, #260]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80023da:	f043 0302 	orr.w	r3, r3, #2
 80023de:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e0:	4b3f      	ldr	r3, [pc, #252]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ec:	2330      	movs	r3, #48	@ 0x30
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023fc:	2302      	movs	r3, #2
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002404:	4619      	mov	r1, r3
 8002406:	4838      	ldr	r0, [pc, #224]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002408:	f000 faea 	bl	80029e0 <HAL_GPIO_Init>
}
 800240c:	e063      	b.n	80024d6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM4)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a37      	ldr	r2, [pc, #220]	@ (80024f0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d12d      	bne.n	8002474 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	4b30      	ldr	r3, [pc, #192]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	4a2f      	ldr	r2, [pc, #188]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6413      	str	r3, [r2, #64]	@ 0x40
 8002428:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	4a28      	ldr	r2, [pc, #160]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	6313      	str	r3, [r2, #48]	@ 0x30
 8002444:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002450:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002462:	2302      	movs	r3, #2
 8002464:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002466:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800246a:	4619      	mov	r1, r3
 800246c:	4821      	ldr	r0, [pc, #132]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0x204>)
 800246e:	f000 fab7 	bl	80029e0 <HAL_GPIO_Init>
}
 8002472:	e030      	b.n	80024d6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM5)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <HAL_TIM_Encoder_MspInit+0x208>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12b      	bne.n	80024d6 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	4a16      	ldr	r2, [pc, #88]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	6413      	str	r3, [r2, #64]	@ 0x40
 800248e:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a0f      	ldr	r2, [pc, #60]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b6:	2303      	movs	r3, #3
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024c6:	2302      	movs	r3, #2
 80024c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80024d2:	f000 fa85 	bl	80029e0 <HAL_GPIO_Init>
}
 80024d6:	bf00      	nop
 80024d8:	3740      	adds	r7, #64	@ 0x40
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40000800 	.word	0x40000800
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40000c00 	.word	0x40000c00

080024fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a37      	ldr	r2, [pc, #220]	@ (80025f8 <HAL_TIM_MspPostInit+0xfc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d11f      	bne.n	800255e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a35      	ldr	r2, [pc, #212]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 8002528:	f043 0310 	orr.w	r3, r3, #16
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b33      	ldr	r3, [pc, #204]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800253a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800253e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800254c:	2301      	movs	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	482a      	ldr	r0, [pc, #168]	@ (8002600 <HAL_TIM_MspPostInit+0x104>)
 8002558:	f000 fa42 	bl	80029e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800255c:	e047      	b.n	80025ee <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a28      	ldr	r2, [pc, #160]	@ (8002604 <HAL_TIM_MspPostInit+0x108>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d11e      	bne.n	80025a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6313      	str	r3, [r2, #48]	@ 0x30
 8002578:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002584:	2360      	movs	r3, #96	@ 0x60
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002594:	2303      	movs	r3, #3
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	4818      	ldr	r0, [pc, #96]	@ (8002600 <HAL_TIM_MspPostInit+0x104>)
 80025a0:	f000 fa1e 	bl	80029e0 <HAL_GPIO_Init>
}
 80025a4:	e023      	b.n	80025ee <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <HAL_TIM_MspPostInit+0x10c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d11e      	bne.n	80025ee <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	4a10      	ldr	r2, [pc, #64]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c0:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <HAL_TIM_MspPostInit+0x100>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025cc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80025de:	2309      	movs	r3, #9
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	4808      	ldr	r0, [pc, #32]	@ (800260c <HAL_TIM_MspPostInit+0x110>)
 80025ea:	f000 f9f9 	bl	80029e0 <HAL_GPIO_Init>
}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	@ 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40023800 	.word	0x40023800
 8002600:	40021000 	.word	0x40021000
 8002604:	40014000 	.word	0x40014000
 8002608:	40001800 	.word	0x40001800
 800260c:	40020400 	.word	0x40020400

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <NMI_Handler+0x4>

08002618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <MemManage_Handler+0x4>

08002628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <UsageFault_Handler+0x4>

08002638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	systick_ms++;
 8002668:	4b04      	ldr	r3, [pc, #16]	@ (800267c <SysTick_Handler+0x18>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	4a03      	ldr	r2, [pc, #12]	@ (800267c <SysTick_Handler+0x18>)
 8002670:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002672:	f000 f8af 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000036c 	.word	0x2000036c

08002680 <set_systick_ms>:
  /* Configure the SysTick handler priority */
  NVIC_SetPriority(SysTick_IRQn, 0x0);
}

void set_systick_ms(uint32_t value)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    systick_ms = value; // Set the SysTick millisecond counter
 8002688:	4a04      	ldr	r2, [pc, #16]	@ (800269c <set_systick_ms+0x1c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6013      	str	r3, [r2, #0]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	2000036c 	.word	0x2000036c

080026a0 <get_systick_ms>:

uint32_t get_systick_ms(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
    return systick_ms; // Return the current SysTick millisecond count
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <get_systick_ms+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	2000036c 	.word	0x2000036c

080026b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <SystemInit+0x20>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c2:	4a05      	ldr	r2, [pc, #20]	@ (80026d8 <SystemInit+0x20>)
 80026c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002714 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026e0:	f7ff ffea 	bl	80026b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480c      	ldr	r0, [pc, #48]	@ (8002718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026e6:	490d      	ldr	r1, [pc, #52]	@ (800271c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270a:	f001 fd01 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270e:	f7fe fb79 	bl	8000e04 <main>
  bx  lr    
 8002712:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002714:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800271c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8002720:	08004190 	.word	0x08004190
  ldr r2, =_sbss
 8002724:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8002728:	20000374 	.word	0x20000374

0800272c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC_IRQHandler>
	...

08002730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002734:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <HAL_Init+0x40>)
 800273a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800273e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <HAL_Init+0x40>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <HAL_Init+0x40>)
 8002746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800274a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <HAL_Init+0x40>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	@ (8002770 <HAL_Init+0x40>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f000 f90d 	bl	8002978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275e:	200f      	movs	r0, #15
 8002760:	f000 f808 	bl	8002774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002764:	f7ff fd4e 	bl	8002204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023c00 	.word	0x40023c00

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800277c:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <HAL_InitTick+0x54>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <HAL_InitTick+0x58>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278a:	fbb3 f3f1 	udiv	r3, r3, r1
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f917 	bl	80029c6 <HAL_SYSTICK_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00e      	b.n	80027c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d80a      	bhi.n	80027be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027b0:	f000 f8ed 	bl	800298e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b4:	4a06      	ldr	r2, [pc, #24]	@ (80027d0 <HAL_InitTick+0x5c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200000d8 	.word	0x200000d8
 80027cc:	200000e0 	.word	0x200000e0
 80027d0:	200000dc 	.word	0x200000dc

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	@ (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200000e0 	.word	0x200000e0
 80027f8:	20000370 	.word	0x20000370

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000370 	.word	0x20000370

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db0a      	blt.n	80028a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	490c      	ldr	r1, [pc, #48]	@ (80028c4 <__NVIC_SetPriority+0x4c>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	440b      	add	r3, r1
 800289c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a0:	e00a      	b.n	80028b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4908      	ldr	r1, [pc, #32]	@ (80028c8 <__NVIC_SetPriority+0x50>)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3b04      	subs	r3, #4
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	761a      	strb	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	@ 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf28      	it	cs
 80028ea:	2304      	movcs	r3, #4
 80028ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <NVIC_EncodePriority+0x30>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b03      	subs	r3, #3
 80028fa:	e000      	b.n	80028fe <NVIC_EncodePriority+0x32>
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002914:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43d9      	mvns	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	4313      	orrs	r3, r2
         );
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	@ 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002944:	d301      	bcc.n	800294a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002946:	2301      	movs	r3, #1
 8002948:	e00f      	b.n	800296a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <SysTick_Config+0x40>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002952:	210f      	movs	r1, #15
 8002954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002958:	f7ff ff8e 	bl	8002878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <SysTick_Config+0x40>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002962:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <SysTick_Config+0x40>)
 8002964:	2207      	movs	r2, #7
 8002966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	e000e010 	.word	0xe000e010

08002978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff47 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a0:	f7ff ff5c 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f7ff ff8e 	bl	80028cc <NVIC_EncodePriority>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff5d 	bl	8002878 <__NVIC_SetPriority>
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ffb0 	bl	8002934 <SysTick_Config>
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	@ 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e16b      	b.n	8002cd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029fc:	2201      	movs	r2, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	f040 815a 	bne.w	8002cce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d005      	beq.n	8002a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d130      	bne.n	8002a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a68:	2201      	movs	r2, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 0201 	and.w	r2, r3, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d017      	beq.n	8002ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d123      	bne.n	8002b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	08da      	lsrs	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3208      	adds	r2, #8
 8002ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	08da      	lsrs	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3208      	adds	r2, #8
 8002b1e:	69b9      	ldr	r1, [r7, #24]
 8002b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0203 	and.w	r2, r3, #3
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80b4 	beq.w	8002cce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b60      	ldr	r3, [pc, #384]	@ (8002cec <HAL_GPIO_Init+0x30c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cec <HAL_GPIO_Init+0x30c>)
 8002b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b76:	4b5d      	ldr	r3, [pc, #372]	@ (8002cec <HAL_GPIO_Init+0x30c>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b82:	4a5b      	ldr	r2, [pc, #364]	@ (8002cf0 <HAL_GPIO_Init+0x310>)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	3302      	adds	r3, #2
 8002b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	220f      	movs	r2, #15
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	@ (8002cf4 <HAL_GPIO_Init+0x314>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02b      	beq.n	8002c06 <HAL_GPIO_Init+0x226>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a51      	ldr	r2, [pc, #324]	@ (8002cf8 <HAL_GPIO_Init+0x318>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d025      	beq.n	8002c02 <HAL_GPIO_Init+0x222>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a50      	ldr	r2, [pc, #320]	@ (8002cfc <HAL_GPIO_Init+0x31c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01f      	beq.n	8002bfe <HAL_GPIO_Init+0x21e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4f      	ldr	r2, [pc, #316]	@ (8002d00 <HAL_GPIO_Init+0x320>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d019      	beq.n	8002bfa <HAL_GPIO_Init+0x21a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8002d04 <HAL_GPIO_Init+0x324>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x216>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002d08 <HAL_GPIO_Init+0x328>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002d0c <HAL_GPIO_Init+0x32c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x20e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4b      	ldr	r2, [pc, #300]	@ (8002d10 <HAL_GPIO_Init+0x330>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x20a>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e00e      	b.n	8002c08 <HAL_GPIO_Init+0x228>
 8002bea:	2308      	movs	r3, #8
 8002bec:	e00c      	b.n	8002c08 <HAL_GPIO_Init+0x228>
 8002bee:	2306      	movs	r3, #6
 8002bf0:	e00a      	b.n	8002c08 <HAL_GPIO_Init+0x228>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e008      	b.n	8002c08 <HAL_GPIO_Init+0x228>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x228>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_Init+0x228>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_Init+0x228>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x228>
 8002c06:	2300      	movs	r3, #0
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c18:	4935      	ldr	r1, [pc, #212]	@ (8002cf0 <HAL_GPIO_Init+0x310>)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c26:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4a:	4a32      	ldr	r2, [pc, #200]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c50:	4b30      	ldr	r3, [pc, #192]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c74:	4a27      	ldr	r2, [pc, #156]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c7a:	4b26      	ldr	r3, [pc, #152]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc8:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <HAL_GPIO_Init+0x334>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b0f      	cmp	r3, #15
 8002cd8:	f67f ae90 	bls.w	80029fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3724      	adds	r7, #36	@ 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	40020400 	.word	0x40020400
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40020c00 	.word	0x40020c00
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40021400 	.word	0x40021400
 8002d0c:	40021800 	.word	0x40021800
 8002d10:	40021c00 	.word	0x40021c00
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e267      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d075      	beq.n	8002e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d36:	4b88      	ldr	r3, [pc, #544]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d00c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d42:	4b85      	ldr	r3, [pc, #532]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d112      	bne.n	8002d74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4e:	4b82      	ldr	r3, [pc, #520]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05b      	beq.n	8002e20 <HAL_RCC_OscConfig+0x108>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d157      	bne.n	8002e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e242      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x74>
 8002d7e:	4b76      	ldr	r3, [pc, #472]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a75      	ldr	r2, [pc, #468]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x98>
 8002d96:	4b70      	ldr	r3, [pc, #448]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a6f      	ldr	r2, [pc, #444]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6c      	ldr	r2, [pc, #432]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0xb0>
 8002db0:	4b69      	ldr	r3, [pc, #420]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a68      	ldr	r2, [pc, #416]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b66      	ldr	r3, [pc, #408]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a65      	ldr	r2, [pc, #404]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fd14 	bl	80027fc <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff fd10 	bl	80027fc <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	@ 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e207      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b5b      	ldr	r3, [pc, #364]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xc0>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7ff fd00 	bl	80027fc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e00:	f7ff fcfc 	bl	80027fc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	@ 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1f3      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	4b51      	ldr	r3, [pc, #324]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0xe8>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d063      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3a:	4b47      	ldr	r3, [pc, #284]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d11c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b44      	ldr	r3, [pc, #272]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d116      	bne.n	8002e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	4b41      	ldr	r3, [pc, #260]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x152>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d001      	beq.n	8002e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e1c7      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4937      	ldr	r1, [pc, #220]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	e03a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e88:	4b34      	ldr	r3, [pc, #208]	@ (8002f5c <HAL_RCC_OscConfig+0x244>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8e:	f7ff fcb5 	bl	80027fc <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e96:	f7ff fcb1 	bl	80027fc <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e1a8      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b28      	ldr	r3, [pc, #160]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4925      	ldr	r1, [pc, #148]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	e015      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eca:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <HAL_RCC_OscConfig+0x244>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7ff fc94 	bl	80027fc <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7ff fc90 	bl	80027fc <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e187      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d036      	beq.n	8002f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <HAL_RCC_OscConfig+0x248>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7ff fc74 	bl	80027fc <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f18:	f7ff fc70 	bl	80027fc <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e167      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x200>
 8002f36:	e01b      	b.n	8002f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <HAL_RCC_OscConfig+0x248>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7ff fc5d 	bl	80027fc <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	e00e      	b.n	8002f64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f46:	f7ff fc59 	bl	80027fc <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d907      	bls.n	8002f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e150      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	42470000 	.word	0x42470000
 8002f60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b88      	ldr	r3, [pc, #544]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8002f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ea      	bne.n	8002f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8097 	beq.w	80030ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b81      	ldr	r3, [pc, #516]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	4b7d      	ldr	r3, [pc, #500]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	4a7c      	ldr	r2, [pc, #496]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b77      	ldr	r3, [pc, #476]	@ (800318c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d118      	bne.n	8002fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fba:	4b74      	ldr	r3, [pc, #464]	@ (800318c <HAL_RCC_OscConfig+0x474>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a73      	ldr	r2, [pc, #460]	@ (800318c <HAL_RCC_OscConfig+0x474>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7ff fc19 	bl	80027fc <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7ff fc15 	bl	80027fc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e10c      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800318c <HAL_RCC_OscConfig+0x474>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x2ea>
 8002ff4:	4b64      	ldr	r3, [pc, #400]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff8:	4a63      	ldr	r2, [pc, #396]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003000:	e01c      	b.n	800303c <HAL_RCC_OscConfig+0x324>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b05      	cmp	r3, #5
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x30c>
 800300a:	4b5f      	ldr	r3, [pc, #380]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	4a5e      	ldr	r2, [pc, #376]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	6713      	str	r3, [r2, #112]	@ 0x70
 8003016:	4b5c      	ldr	r3, [pc, #368]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	4a5b      	ldr	r2, [pc, #364]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	@ 0x70
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0x324>
 8003024:	4b58      	ldr	r3, [pc, #352]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003028:	4a57      	ldr	r2, [pc, #348]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003030:	4b55      	ldr	r3, [pc, #340]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003034:	4a54      	ldr	r2, [pc, #336]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 0304 	bic.w	r3, r3, #4
 800303a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d015      	beq.n	8003070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7ff fbda 	bl	80027fc <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7ff fbd6 	bl	80027fc <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0cb      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	4b49      	ldr	r3, [pc, #292]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ee      	beq.n	800304c <HAL_RCC_OscConfig+0x334>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003070:	f7ff fbc4 	bl	80027fc <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003076:	e00a      	b.n	800308e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7ff fbc0 	bl	80027fc <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0b5      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308e:	4b3e      	ldr	r3, [pc, #248]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ee      	bne.n	8003078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b39      	ldr	r3, [pc, #228]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	4a38      	ldr	r2, [pc, #224]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a1 	beq.w	80031f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b6:	4b34      	ldr	r3, [pc, #208]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d05c      	beq.n	800317c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d141      	bne.n	800314e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCC_OscConfig+0x478>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7ff fb94 	bl	80027fc <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7ff fb90 	bl	80027fc <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e087      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	4b27      	ldr	r3, [pc, #156]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	3b01      	subs	r3, #1
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	491b      	ldr	r1, [pc, #108]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003120:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCC_OscConfig+0x478>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003126:	f7ff fb69 	bl	80027fc <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312e:	f7ff fb65 	bl	80027fc <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e05c      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	4b11      	ldr	r3, [pc, #68]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x416>
 800314c:	e054      	b.n	80031f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <HAL_RCC_OscConfig+0x478>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff fb52 	bl	80027fc <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7ff fb4e 	bl	80027fc <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e045      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_RCC_OscConfig+0x470>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x444>
 800317a:	e03d      	b.n	80031f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d107      	bne.n	8003194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e038      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
 8003188:	40023800 	.word	0x40023800
 800318c:	40007000 	.word	0x40007000
 8003190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003194:	4b1b      	ldr	r3, [pc, #108]	@ (8003204 <HAL_RCC_OscConfig+0x4ec>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d028      	beq.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d121      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d11a      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d111      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	3b01      	subs	r3, #1
 80031de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0cc      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b68      	ldr	r3, [pc, #416]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d90c      	bls.n	8003244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b65      	ldr	r3, [pc, #404]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b63      	ldr	r3, [pc, #396]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0b8      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800325c:	4b59      	ldr	r3, [pc, #356]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a58      	ldr	r2, [pc, #352]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003266:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003274:	4b53      	ldr	r3, [pc, #332]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a52      	ldr	r2, [pc, #328]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800327e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b50      	ldr	r3, [pc, #320]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	494d      	ldr	r1, [pc, #308]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d044      	beq.n	8003328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b47      	ldr	r3, [pc, #284]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d119      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e07f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c6:	4b3f      	ldr	r3, [pc, #252]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d6:	4b3b      	ldr	r3, [pc, #236]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e067      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b37      	ldr	r3, [pc, #220]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4934      	ldr	r1, [pc, #208]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f8:	f7ff fa80 	bl	80027fc <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7ff fa7c 	bl	80027fc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e04f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b2b      	ldr	r3, [pc, #172]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003328:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d20c      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b22      	ldr	r3, [pc, #136]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e032      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800335c:	4b19      	ldr	r3, [pc, #100]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4916      	ldr	r1, [pc, #88]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337a:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	490e      	ldr	r1, [pc, #56]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800338e:	f000 f821 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003392:	4602      	mov	r2, r0
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	490a      	ldr	r1, [pc, #40]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	5ccb      	ldrb	r3, [r1, r3]
 80033a2:	fa22 f303 	lsr.w	r3, r2, r3
 80033a6:	4a09      	ldr	r2, [pc, #36]	@ (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033aa:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f9e0 	bl	8002774 <HAL_InitTick>

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023c00 	.word	0x40023c00
 80033c4:	40023800 	.word	0x40023800
 80033c8:	08004170 	.word	0x08004170
 80033cc:	200000d8 	.word	0x200000d8
 80033d0:	200000dc 	.word	0x200000dc

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d8:	b090      	sub	sp, #64	@ 0x40
 80033da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ec:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d00d      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x40>
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	f200 80a1 	bhi.w	8003540 <HAL_RCC_GetSysClockFreq+0x16c>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x34>
 8003402:	2b04      	cmp	r3, #4
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x3a>
 8003406:	e09b      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b53      	ldr	r3, [pc, #332]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x184>)
 800340a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800340c:	e09b      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800340e:	4b53      	ldr	r3, [pc, #332]	@ (800355c <HAL_RCC_GetSysClockFreq+0x188>)
 8003410:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003412:	e098      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003414:	4b4f      	ldr	r3, [pc, #316]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x180>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800341c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800341e:	4b4d      	ldr	r3, [pc, #308]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x180>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d028      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342a:	4b4a      	ldr	r3, [pc, #296]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x180>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	099b      	lsrs	r3, r3, #6
 8003430:	2200      	movs	r2, #0
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	627a      	str	r2, [r7, #36]	@ 0x24
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800343c:	2100      	movs	r1, #0
 800343e:	4b47      	ldr	r3, [pc, #284]	@ (800355c <HAL_RCC_GetSysClockFreq+0x188>)
 8003440:	fb03 f201 	mul.w	r2, r3, r1
 8003444:	2300      	movs	r3, #0
 8003446:	fb00 f303 	mul.w	r3, r0, r3
 800344a:	4413      	add	r3, r2
 800344c:	4a43      	ldr	r2, [pc, #268]	@ (800355c <HAL_RCC_GetSysClockFreq+0x188>)
 800344e:	fba0 1202 	umull	r1, r2, r0, r2
 8003452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003454:	460a      	mov	r2, r1
 8003456:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800345a:	4413      	add	r3, r2
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800345e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003460:	2200      	movs	r2, #0
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	61fa      	str	r2, [r7, #28]
 8003466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800346e:	f7fd fb51 	bl	8000b14 <__aeabi_uldivmod>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4613      	mov	r3, r2
 8003478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347a:	e053      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347c:	4b35      	ldr	r3, [pc, #212]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x180>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	2200      	movs	r2, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	617a      	str	r2, [r7, #20]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800348e:	f04f 0b00 	mov.w	fp, #0
 8003492:	4652      	mov	r2, sl
 8003494:	465b      	mov	r3, fp
 8003496:	f04f 0000 	mov.w	r0, #0
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	0159      	lsls	r1, r3, #5
 80034a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a4:	0150      	lsls	r0, r2, #5
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	ebb2 080a 	subs.w	r8, r2, sl
 80034ae:	eb63 090b 	sbc.w	r9, r3, fp
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034c6:	ebb2 0408 	subs.w	r4, r2, r8
 80034ca:	eb63 0509 	sbc.w	r5, r3, r9
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	00eb      	lsls	r3, r5, #3
 80034d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034dc:	00e2      	lsls	r2, r4, #3
 80034de:	4614      	mov	r4, r2
 80034e0:	461d      	mov	r5, r3
 80034e2:	eb14 030a 	adds.w	r3, r4, sl
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	eb45 030b 	adc.w	r3, r5, fp
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fa:	4629      	mov	r1, r5
 80034fc:	028b      	lsls	r3, r1, #10
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003504:	4621      	mov	r1, r4
 8003506:	028a      	lsls	r2, r1, #10
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350e:	2200      	movs	r2, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	60fa      	str	r2, [r7, #12]
 8003514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003518:	f7fd fafc 	bl	8000b14 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x180>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003534:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x184>)
 8003542:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003548:	4618      	mov	r0, r3
 800354a:	3740      	adds	r7, #64	@ 0x40
 800354c:	46bd      	mov	sp, r7
 800354e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	00f42400 	.word	0x00f42400
 800355c:	017d7840 	.word	0x017d7840

08003560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e041      	b.n	80035f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe fe64 	bl	8002254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 fa5e 	bl	8003a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_TIM_PWM_Start+0x24>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e022      	b.n	800366a <HAL_TIM_PWM_Start+0x6a>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b04      	cmp	r3, #4
 8003628:	d109      	bne.n	800363e <HAL_TIM_PWM_Start+0x3e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	bf14      	ite	ne
 8003636:	2301      	movne	r3, #1
 8003638:	2300      	moveq	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	e015      	b.n	800366a <HAL_TIM_PWM_Start+0x6a>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d109      	bne.n	8003658 <HAL_TIM_PWM_Start+0x58>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e008      	b.n	800366a <HAL_TIM_PWM_Start+0x6a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07c      	b.n	800376c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d104      	bne.n	8003682 <HAL_TIM_PWM_Start+0x82>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003680:	e013      	b.n	80036aa <HAL_TIM_PWM_Start+0xaa>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d104      	bne.n	8003692 <HAL_TIM_PWM_Start+0x92>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003690:	e00b      	b.n	80036aa <HAL_TIM_PWM_Start+0xaa>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d104      	bne.n	80036a2 <HAL_TIM_PWM_Start+0xa2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a0:	e003      	b.n	80036aa <HAL_TIM_PWM_Start+0xaa>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2201      	movs	r2, #1
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc30 	bl	8003f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003774 <HAL_TIM_PWM_Start+0x174>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_PWM_Start+0xcc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003778 <HAL_TIM_PWM_Start+0x178>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_PWM_Start+0xd0>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_TIM_PWM_Start+0xd2>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a22      	ldr	r2, [pc, #136]	@ (8003774 <HAL_TIM_PWM_Start+0x174>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d022      	beq.n	8003736 <HAL_TIM_PWM_Start+0x136>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f8:	d01d      	beq.n	8003736 <HAL_TIM_PWM_Start+0x136>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1f      	ldr	r2, [pc, #124]	@ (800377c <HAL_TIM_PWM_Start+0x17c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d018      	beq.n	8003736 <HAL_TIM_PWM_Start+0x136>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1d      	ldr	r2, [pc, #116]	@ (8003780 <HAL_TIM_PWM_Start+0x180>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_TIM_PWM_Start+0x136>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <HAL_TIM_PWM_Start+0x184>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_TIM_PWM_Start+0x136>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a16      	ldr	r2, [pc, #88]	@ (8003778 <HAL_TIM_PWM_Start+0x178>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d009      	beq.n	8003736 <HAL_TIM_PWM_Start+0x136>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <HAL_TIM_PWM_Start+0x188>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_TIM_PWM_Start+0x136>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a16      	ldr	r2, [pc, #88]	@ (800378c <HAL_TIM_PWM_Start+0x18c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d010      	beq.n	800376a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	e007      	b.n	800376a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40010000 	.word	0x40010000
 8003778:	40010400 	.word	0x40010400
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40014000 	.word	0x40014000
 800378c:	40001800 	.word	0x40001800

08003790 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e097      	b.n	80038d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fe fd99 	bl	80022f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f000 f93b 	bl	8003a60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	4313      	orrs	r3, r2
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003830:	f023 030c 	bic.w	r3, r3, #12
 8003834:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800383c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	4313      	orrs	r3, r2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	011a      	lsls	r2, r3, #4
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	031b      	lsls	r3, r3, #12
 8003860:	4313      	orrs	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003876:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4313      	orrs	r3, r2
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e0ae      	b.n	8003a58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	f200 809f 	bhi.w	8003a48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800390a:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003945 	.word	0x08003945
 8003914:	08003a49 	.word	0x08003a49
 8003918:	08003a49 	.word	0x08003a49
 800391c:	08003a49 	.word	0x08003a49
 8003920:	08003985 	.word	0x08003985
 8003924:	08003a49 	.word	0x08003a49
 8003928:	08003a49 	.word	0x08003a49
 800392c:	08003a49 	.word	0x08003a49
 8003930:	080039c7 	.word	0x080039c7
 8003934:	08003a49 	.word	0x08003a49
 8003938:	08003a49 	.word	0x08003a49
 800393c:	08003a49 	.word	0x08003a49
 8003940:	08003a07 	.word	0x08003a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f934 	bl	8003bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6999      	ldr	r1, [r3, #24]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	619a      	str	r2, [r3, #24]
      break;
 8003982:	e064      	b.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f984 	bl	8003c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
      break;
 80039c4:	e043      	b.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f9d9 	bl	8003d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0204 	bic.w	r2, r2, #4
 80039f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	61da      	str	r2, [r3, #28]
      break;
 8003a04:	e023      	b.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa2d 	bl	8003e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	021a      	lsls	r2, r3, #8
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	61da      	str	r2, [r3, #28]
      break;
 8003a46:	e002      	b.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a46      	ldr	r2, [pc, #280]	@ (8003b8c <TIM_Base_SetConfig+0x12c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a7e:	d00f      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a43      	ldr	r2, [pc, #268]	@ (8003b90 <TIM_Base_SetConfig+0x130>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00b      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a42      	ldr	r2, [pc, #264]	@ (8003b94 <TIM_Base_SetConfig+0x134>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d007      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a41      	ldr	r2, [pc, #260]	@ (8003b98 <TIM_Base_SetConfig+0x138>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a40      	ldr	r2, [pc, #256]	@ (8003b9c <TIM_Base_SetConfig+0x13c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d108      	bne.n	8003ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a35      	ldr	r2, [pc, #212]	@ (8003b8c <TIM_Base_SetConfig+0x12c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac0:	d027      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a32      	ldr	r2, [pc, #200]	@ (8003b90 <TIM_Base_SetConfig+0x130>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d023      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a31      	ldr	r2, [pc, #196]	@ (8003b94 <TIM_Base_SetConfig+0x134>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01f      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a30      	ldr	r2, [pc, #192]	@ (8003b98 <TIM_Base_SetConfig+0x138>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2f      	ldr	r2, [pc, #188]	@ (8003b9c <TIM_Base_SetConfig+0x13c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d017      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba0 <TIM_Base_SetConfig+0x140>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba4 <TIM_Base_SetConfig+0x144>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00f      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba8 <TIM_Base_SetConfig+0x148>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2b      	ldr	r2, [pc, #172]	@ (8003bac <TIM_Base_SetConfig+0x14c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb0 <TIM_Base_SetConfig+0x150>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a29      	ldr	r2, [pc, #164]	@ (8003bb4 <TIM_Base_SetConfig+0x154>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a10      	ldr	r2, [pc, #64]	@ (8003b8c <TIM_Base_SetConfig+0x12c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_Base_SetConfig+0xf8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a12      	ldr	r2, [pc, #72]	@ (8003b9c <TIM_Base_SetConfig+0x13c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d103      	bne.n	8003b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d105      	bne.n	8003b7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]
  }
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800
 8003b98:	40000c00 	.word	0x40000c00
 8003b9c:	40010400 	.word	0x40010400
 8003ba0:	40014000 	.word	0x40014000
 8003ba4:	40014400 	.word	0x40014400
 8003ba8:	40014800 	.word	0x40014800
 8003bac:	40001800 	.word	0x40001800
 8003bb0:	40001c00 	.word	0x40001c00
 8003bb4:	40002000 	.word	0x40002000

08003bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f023 0201 	bic.w	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 0302 	bic.w	r3, r3, #2
 8003c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a20      	ldr	r2, [pc, #128]	@ (8003c90 <TIM_OC1_SetConfig+0xd8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_OC1_SetConfig+0x64>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a1f      	ldr	r2, [pc, #124]	@ (8003c94 <TIM_OC1_SetConfig+0xdc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10c      	bne.n	8003c36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0308 	bic.w	r3, r3, #8
 8003c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a15      	ldr	r2, [pc, #84]	@ (8003c90 <TIM_OC1_SetConfig+0xd8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_OC1_SetConfig+0x8e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a14      	ldr	r2, [pc, #80]	@ (8003c94 <TIM_OC1_SetConfig+0xdc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d111      	bne.n	8003c6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	621a      	str	r2, [r3, #32]
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40010400 	.word	0x40010400

08003c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 0210 	bic.w	r2, r3, #16
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0320 	bic.w	r3, r3, #32
 8003ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a22      	ldr	r2, [pc, #136]	@ (8003d7c <TIM_OC2_SetConfig+0xe4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_OC2_SetConfig+0x68>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a21      	ldr	r2, [pc, #132]	@ (8003d80 <TIM_OC2_SetConfig+0xe8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10d      	bne.n	8003d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	@ (8003d7c <TIM_OC2_SetConfig+0xe4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC2_SetConfig+0x94>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a16      	ldr	r2, [pc, #88]	@ (8003d80 <TIM_OC2_SetConfig+0xe8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d113      	bne.n	8003d54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40010400 	.word	0x40010400

08003d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a21      	ldr	r2, [pc, #132]	@ (8003e64 <TIM_OC3_SetConfig+0xe0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_OC3_SetConfig+0x66>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a20      	ldr	r2, [pc, #128]	@ (8003e68 <TIM_OC3_SetConfig+0xe4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10d      	bne.n	8003e06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a16      	ldr	r2, [pc, #88]	@ (8003e64 <TIM_OC3_SetConfig+0xe0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d003      	beq.n	8003e16 <TIM_OC3_SetConfig+0x92>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a15      	ldr	r2, [pc, #84]	@ (8003e68 <TIM_OC3_SetConfig+0xe4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d113      	bne.n	8003e3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40010400 	.word	0x40010400

08003e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	031b      	lsls	r3, r3, #12
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a12      	ldr	r2, [pc, #72]	@ (8003f10 <TIM_OC4_SetConfig+0xa4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_OC4_SetConfig+0x68>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <TIM_OC4_SetConfig+0xa8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d109      	bne.n	8003ee8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40010400 	.word	0x40010400

08003f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e05a      	b.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	@ (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc8:	d01d      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1d      	ldr	r2, [pc, #116]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800404c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a17      	ldr	r2, [pc, #92]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a15      	ldr	r2, [pc, #84]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10c      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800400c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40001800 	.word	0x40001800

0800405c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004074:	2302      	movs	r3, #2
 8004076:	e03d      	b.n	80040f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <memset>:
 8004100:	4402      	add	r2, r0
 8004102:	4603      	mov	r3, r0
 8004104:	4293      	cmp	r3, r2
 8004106:	d100      	bne.n	800410a <memset+0xa>
 8004108:	4770      	bx	lr
 800410a:	f803 1b01 	strb.w	r1, [r3], #1
 800410e:	e7f9      	b.n	8004104 <memset+0x4>

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	4d0d      	ldr	r5, [pc, #52]	@ (8004148 <__libc_init_array+0x38>)
 8004114:	4c0d      	ldr	r4, [pc, #52]	@ (800414c <__libc_init_array+0x3c>)
 8004116:	1b64      	subs	r4, r4, r5
 8004118:	10a4      	asrs	r4, r4, #2
 800411a:	2600      	movs	r6, #0
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	4d0b      	ldr	r5, [pc, #44]	@ (8004150 <__libc_init_array+0x40>)
 8004122:	4c0c      	ldr	r4, [pc, #48]	@ (8004154 <__libc_init_array+0x44>)
 8004124:	f000 f818 	bl	8004158 <_init>
 8004128:	1b64      	subs	r4, r4, r5
 800412a:	10a4      	asrs	r4, r4, #2
 800412c:	2600      	movs	r6, #0
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f855 3b04 	ldr.w	r3, [r5], #4
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	08004188 	.word	0x08004188
 800414c:	08004188 	.word	0x08004188
 8004150:	08004188 	.word	0x08004188
 8004154:	0800418c 	.word	0x0800418c

08004158 <_init>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr

08004164 <_fini>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr
